// Code generated by go-bindata. (@generated) DO NOT EDIT.
// sources:
// compiled/Authority.abi
// compiled/Authority.bin-runtime
// compiled/AuthorityNative.abi
// compiled/AuthorityNative.bin-runtime
// compiled/Executor.abi
// compiled/Executor.bin-runtime
// compiled/Extension.abi
// compiled/Extension.bin-runtime
// compiled/ExtensionNative.abi
// compiled/ExtensionNative.bin-runtime
// compiled/Measure.abi
// compiled/Measure.bin-runtime
// compiled/Params.abi
// compiled/Params.bin-runtime
// compiled/ParamsNative.abi
// compiled/ParamsNative.bin-runtime
// compiled/Prototype.abi
// compiled/Prototype.bin-runtime
// compiled/PrototypeEvent.abi
// compiled/PrototypeEvent.bin-runtime
// compiled/PrototypeNative.abi
// compiled/PrototypeNative.bin-runtime
// compiled/Token.abi
// compiled/Token.bin-runtime
package gen

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _compiledAuthorityAbi = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xbc\x93\xcb\x6e\xf2\x40\x0c\x85\xdf\xc5\xeb\x59\xfd\xff\x2e\xdb\xae\x79\x02\x84\x90\x89\x4d\x35\x6a\xb0\xd1\xd8\x93\x12\x21\xde\xbd\x02\x91\x4c\x5a\x85\x4b\x2f\xca\x36\xf1\x1c\x7f\xc7\x3e\x5e\x1e\xa1\x56\x31\x47\x71\xa8\xb6\xd8\x18\x07\x88\xb2\xcf\x6e\x50\x2d\x8f\x20\xb8\x63\xa8\x60\x2d\x4a\xbc\x40\x73\x4e\x10\xc0\xbb\xfd\xf9\x23\x12\x25\x36\x83\xd3\x2a\xf4\x75\x89\x5b\x7d\x63\x08\xa0\xd9\xaf\x1a\xab\x00\x7b\xec\x70\xd3\xf0\xa0\x6f\x8e\xce\x8b\xec\xb8\x89\x4d\xf4\x0e\x2a\x10\x95\xbe\x68\x90\xdf\x66\xa9\x3d\xaa\xc0\x29\x8c\x19\x3d\xe5\x5f\x21\xbe\xb2\x7f\xe2\x1b\x04\x9a\x68\xce\x54\xde\x6e\x54\x9b\x4b\xef\xeb\x7f\x16\xd2\x64\x3a\xa5\x5e\x8a\x22\xb1\xf8\xd9\x53\x91\xe9\x9c\xed\xff\xbf\x71\x11\xd6\x1e\x5b\xfe\xda\xe9\xa9\x41\xb5\x91\xdf\x1f\x8e\xe8\x87\x6b\x2c\x80\xeb\xa7\xbc\xae\xef\x98\x2d\xf3\x46\xa2\x39\xf3\x50\x1a\xf3\x81\xeb\xec\x17\x0f\x13\xdb\x9e\xce\xc8\x1f\x2d\xe0\x26\xd3\x36\x26\xbb\x11\xbf\x39\x81\xbe\x7d\x34\xc2\x87\xf9\xb0\x51\x54\xba\x9d\x66\x9b\x4a\x72\x14\xe2\x03\x53\x6f\xa9\xe7\x7b\x90\xeb\xe1\xd5\x55\x70\x74\x88\x2a\x77\xe3\xfb\x82\x42\x91\xd0\x47\x41\xe4\x96\xc5\xe1\xb4\xfa\x08\x00\x00\xff\xff\x0d\x70\x4a\x56\x3b\x05\x00\x00")

func compiledAuthorityAbiBytes() ([]byte, error) {
	return bindataRead(
		_compiledAuthorityAbi,
		"compiled/Authority.abi",
	)
}

func compiledAuthorityAbi() (*asset, error) {
	bytes, err := compiledAuthorityAbiBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "compiled/Authority.abi", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _compiledAuthorityBinRuntime = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xe4\x58\x0b\x76\xe2\x3c\x0f\xdd\x92\xde\x92\x97\x63\xcb\xf6\xfe\x97\xf0\x1f\x27\x50\xe8\xd0\x02\x61\xa6\xfc\x73\xe6\x23\x87\x86\x2a\xf1\x43\x57\x57\xd2\x4d\x0c\x02\x0c\x04\x94\x0c\x40\xd8\x10\x0c\x01\x3c\xd4\x0d\x00\x58\x3d\x01\xe1\xc5\x4f\x01\x10\xe3\x79\xfa\xa0\x05\x18\xc3\xcc\x9a\x06\x13\x65\x5b\xa7\xab\x2f\xab\xa8\x64\xf7\x94\xdd\x9a\xb0\x5b\x3d\x4a\x66\x28\x6d\x56\xb4\xd8\xad\x4d\x7a\xa9\xa4\xbe\x5b\x7b\xd9\xad\x49\x91\xa5\x5a\xd9\xac\xc4\x70\xb6\xce\x32\xb8\xe7\x6e\x0d\x57\xd7\xb6\xfc\x0a\x98\x5d\x1b\x4b\x00\xea\x5a\x31\xca\xee\xef\x6e\xd7\x0d\x83\x36\x16\x22\x01\x6c\xc0\x81\x80\x05\x02\x62\x21\xf2\xe1\xd1\xa3\x0f\x5a\x01\x03\x82\x35\xb6\x50\xc1\x02\xba\x1d\x86\xc0\x50\xd5\xb4\x01\x5c\xef\x22\xf3\x66\x17\xcb\xef\x9f\xdb\x85\x39\xaf\x5d\x6c\xf1\xc7\x80\x50\x3c\x1d\x81\x8b\x0f\x6b\x4c\xc8\x91\x95\x8e\xdc\x7b\xb5\x06\x2f\xaf\xb1\xa0\x9d\xcf\x57\xd7\xe8\x76\x4f\x45\x14\xce\xc7\x79\xef\x05\x81\x0b\x4c\xbe\xc2\x13\x5d\x6e\xf1\xec\xfe\xe7\xf1\xfc\x13\xe3\xcf\x9e\x7f\x1b\x2b\xf7\xbc\x61\x0c\x0e\xbd\xf5\x70\x0c\x43\x68\xa9\x9f\x22\x4b\x3f\x1f\xc5\x82\x0f\xe2\x41\x7c\xcb\x6f\x92\x75\x25\xad\xfd\x7d\xbb\x2d\x7c\xbb\xdb\x8c\x1f\xcc\xc6\x8e\xf8\xb7\xa0\xb0\x2a\x14\xd2\x85\x47\x47\x66\x67\x3e\x72\x37\x4a\x2c\xdf\x05\x87\xba\x02\xc3\x91\xb1\xc6\xda\x07\x07\x57\x09\x3a\xf9\x40\xd7\xfd\xe6\x77\x7a\x17\xd0\x8e\x12\x08\xbc\x39\x16\xf4\x11\x8f\xe0\xc5\xb2\x8d\x83\x1e\xc0\x0d\xf5\xc4\x4d\x1e\xf8\x99\x9b\x5a\x27\x5e\xae\x4e\x55\xe7\xbe\x5f\xe7\xb1\xff\x3a\xdd\x77\x55\x33\x97\x9d\x20\x10\xf7\x51\x02\xed\x7a\xce\x0b\xbb\x15\xbf\x66\x2c\xaa\xb6\x55\x97\xd7\xd8\xb6\xe9\x85\x35\xab\x4f\x19\x02\x98\x6d\xbc\x0a\xfc\x27\xdc\xe1\xdc\x05\x02\x81\x83\xd6\x15\xae\x57\xdd\x01\x7c\x1a\xb9\x5a\xb1\x74\xb1\x62\x83\x2b\x81\x93\xa9\xe3\xb2\x6e\xbf\x98\xc0\xd4\xc3\xd4\xd8\xd5\xc5\xa6\x13\x25\xc1\x76\x06\x1b\x97\xd9\x7c\xda\x34\x31\x25\xb0\x6e\xe8\xec\x62\xba\xdd\x33\xd7\xb8\x75\x36\x5b\x73\xd9\xb0\x6d\x16\x67\x53\x93\x5f\xf7\xbe\xe3\xfb\x4d\x6e\x2d\xd5\x71\x90\xe3\x3d\x22\x6b\x4b\xfa\x8f\x71\x5c\x95\xef\x70\x5c\xcd\x5f\xe0\xb8\x2e\xbd\x79\x8c\xe3\xdb\x38\x03\x7a\x1f\xbf\x91\x1f\xf1\xdb\x86\xcd\x8d\x8f\x69\x65\x67\xe9\x67\x16\xde\xae\xa7\x70\xa7\xde\x2f\x24\x0e\x71\xd2\x67\x8f\xee\xa5\x89\xcb\x54\xa9\x55\x47\xe9\xae\x03\xa5\x82\x54\x69\x06\x4d\x64\xe0\xc0\xda\xc7\x14\xeb\xb5\x59\xce\x98\x58\x48\x90\x6a\xb3\xb0\xfc\x88\x3e\xf8\xdc\x72\xd4\x6c\x5a\xbb\xef\xc7\x53\xfe\xdd\x78\x57\x49\x61\xef\xaa\xb0\xa1\xbd\xf1\xe5\x60\x06\x52\xcb\x92\x90\x1c\xf6\xef\x64\x60\x3c\xce\x40\x47\xb9\x93\x81\x4e\xf1\x6c\x06\xc6\x25\x03\x9d\xc7\xb3\x19\xf8\x3b\xb6\x7d\x07\x85\x7f\xf9\xe2\xc7\xdf\x33\x23\x0e\x6a\x95\xfd\x49\xc4\x10\x62\xef\x96\x6f\xaa\x08\xf9\xb0\x22\x14\x1b\x6e\x86\xab\x22\x98\xec\x15\xe2\xb6\x93\x7d\x99\x31\xdf\x54\x84\x0d\x9d\x43\x7c\xbc\x46\xa7\xd4\x37\xa2\x53\x0e\xa3\x73\xdd\xc1\xe7\x05\x97\x63\xe8\x18\x00\xae\xfc\x3d\x3f\xb9\x5d\xf9\x5f\xf0\xef\xf6\xbf\x2c\x6e\xd8\x58\x77\xb8\x78\x79\xc1\x7f\x84\x42\x6f\x7a\x3e\x38\x63\x9a\xf2\x46\x4c\x1f\x6a\xcc\x1b\x45\xf9\x8b\xea\xfc\x5a\x17\xde\xc3\xf4\x68\x57\x6a\x52\xa6\xa4\xd4\x90\x75\x9c\xe6\x93\x1f\xea\x4c\x6f\x79\x0b\xf4\x86\x35\xe8\xfb\x37\x4d\xab\x37\x9c\x3b\xd7\x13\xfa\xb4\xd6\x7b\xfa\xb4\xb6\x57\xf4\x69\xcd\xd7\xf4\x69\xd3\x77\xea\x53\x7f\x98\x1b\x68\xb9\xe5\x00\x9a\x78\x39\xe5\xca\xa6\x54\x9d\xbf\x5e\xef\xa1\x3e\x3d\xa6\x8c\xfe\xa8\x3e\x5d\x5e\xd8\x03\x8d\xfd\x08\xcf\x07\xfa\x14\x2e\x1a\xf5\x68\x15\x60\x06\xce\x6c\x7c\x9a\x15\x7f\x22\xff\x9f\xca\x87\xa4\x76\x27\x1f\x92\xe7\x0b\xf9\x90\xaa\xc7\xf2\xa1\xec\xdf\x17\xb1\x04\xe6\x55\x4d\xc7\xff\x1f\xcb\x7e\xef\xfd\x4e\x8e\x57\xde\xef\xe4\x3c\xf8\x7e\xe7\xf7\xb0\xac\x53\xb8\xd9\xa0\xe0\x7f\xe7\x99\xe9\x89\xc8\xf5\x3a\xee\x44\xae\x27\xbd\x10\xb9\xde\xe3\x85\xc8\xed\xff\x19\x40\x45\x53\x23\xaf\x5e\x9d\x18\x34\x08\x3a\xeb\x80\xc1\xd2\x73\x62\xc9\xe8\xd4\xb5\x13\x88\x29\x68\xf6\xc0\x9a\xe6\x85\x7d\x75\x47\xa6\xc8\x46\x83\xa8\xcf\x55\xf7\x47\x95\x56\xd5\x01\xa8\xfc\x2f\x00\x00\xff\xff\x77\x8b\x50\x98\x38\x1c\x00\x00")

func compiledAuthorityBinRuntimeBytes() ([]byte, error) {
	return bindataRead(
		_compiledAuthorityBinRuntime,
		"compiled/Authority.bin-runtime",
	)
}

func compiledAuthorityBinRuntime() (*asset, error) {
	bytes, err := compiledAuthorityBinRuntimeBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "compiled/Authority.bin-runtime", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _compiledAuthoritynativeAbi = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xd4\x93\xcf\x6a\xf3\x40\x0c\xc4\xdf\x45\xe7\x3d\x7d\xdf\xcd\xf7\x1e\xf3\x04\xc1\x14\xd9\x3b\x2e\x4b\x5d\xc9\xac\xb4\x6e\x4c\xc8\xbb\x97\x98\xa4\xa1\x38\x49\x5b\x68\xfa\xe7\x66\xd0\xc8\xfa\x69\x46\xbb\xde\x52\xab\x62\xce\xe2\x54\x79\x2e\x08\x94\x64\x28\x6e\x54\xad\xeb\x40\xc2\x4f\xa0\x8a\x84\x3d\x8d\xb8\xef\x52\x36\xa7\x40\x5a\xfc\x20\xd9\x1e\x15\x14\xc8\xa7\x61\xff\xc5\x31\x66\x98\xd1\xae\x0e\x34\xf0\xc4\x4d\x0f\xaa\x3a\xee\x0d\x81\xcc\xd9\xb1\x2a\xce\x4d\xea\x93\x4f\x54\xd1\x98\xf0\x7c\xea\xed\x8a\xb4\x9e\x54\x68\x17\xae\x70\xbd\x0e\x15\x8d\x58\xb1\x39\xf2\xf9\xf1\x6f\xe9\x1f\xf0\x2e\x7b\xa3\xda\xcf\xb3\x2f\x6f\x75\xae\xd8\x4c\x0e\xfb\xff\xef\x42\x71\xfe\xe7\xcd\xcc\x58\xac\x89\x0d\xda\xe2\x9a\xff\x6c\x4e\xc9\xee\x24\x6a\x36\xc4\x8f\xc5\xf5\xdb\xf8\x05\x9b\x9f\x78\x24\x87\xee\x4f\xd2\x9f\x2e\x16\xb3\xe9\x7a\x5d\x94\x22\xc4\xf7\x50\xcb\xdb\x5f\xf8\xc0\xf1\x2b\x03\x14\x95\xa3\xe8\x36\x4e\x2c\xf8\x33\x46\x7d\xc4\xb7\xad\x50\xbf\x04\x00\x00\xff\xff\x0a\x11\x12\x3e\x8b\x05\x00\x00")

func compiledAuthoritynativeAbiBytes() ([]byte, error) {
	return bindataRead(
		_compiledAuthoritynativeAbi,
		"compiled/AuthorityNative.abi",
	)
}

func compiledAuthoritynativeAbi() (*asset, error) {
	bytes, err := compiledAuthoritynativeAbiBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "compiled/AuthorityNative.abi", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _compiledAuthoritynativeBinRuntime = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func compiledAuthoritynativeBinRuntimeBytes() ([]byte, error) {
	return bindataRead(
		_compiledAuthoritynativeBinRuntime,
		"compiled/AuthorityNative.bin-runtime",
	)
}

func compiledAuthoritynativeBinRuntime() (*asset, error) {
	bytes, err := compiledAuthoritynativeBinRuntimeBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "compiled/AuthorityNative.bin-runtime", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _compiledExecutorAbi = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x96\x41\x6f\xdb\x30\x0c\x85\xff\x8b\xce\x3e\x6d\xc3\x30\xf8\x16\x74\x97\x1d\x06\xe4\xb4\x4b\x51\x14\x8c\xc5\x76\xc2\x6c\xd2\x93\x28\xb7\x46\xd1\xff\x3e\x24\x95\x21\x39\xb6\x55\x23\x6b\x9b\xdc\x02\xe4\x89\xfe\xf8\xf4\x48\xfb\xfa\x49\x55\x4c\x4e\x80\x44\x95\x62\x3d\x16\xca\x50\xeb\xc5\xa9\xf2\xfa\x49\x11\x34\xa8\x4a\xa5\x0a\x25\x7d\xbb\xff\x05\x5a\x5b\x74\x4e\x3d\xdf\x14\xc3\x9f\x1d\x8b\xa1\xfb\x2b\x26\xb1\x50\x89\x53\x85\x62\x2f\xcb\x15\x76\xcc\xf5\xe1\x78\x0b\x3d\xec\x6a\x54\xe5\x1d\xd4\x0e\x0b\xe5\x04\x04\x7f\x7a\x81\x9d\xa9\x8d\xf4\xfb\xca\x06\x1f\xe2\xc1\x3b\x4f\x95\x18\x26\xf5\x5c\xa4\xcc\xe1\xf4\x14\xfa\xb6\x0a\x48\x59\x7a\x10\x81\xea\xf7\xaf\x51\x0f\xa3\x16\x56\x91\x12\xd3\x20\x3a\x9d\xb7\xb5\xdc\xb2\x83\xfa\xc7\xf7\xc4\xad\x5e\xd0\x7d\xfe\x94\x12\xe3\x23\x56\x5e\xf0\x4c\x90\xab\x4c\xd5\x78\x31\xa6\x42\xdb\x5a\xee\xd0\x66\x79\x2d\x76\xfc\x07\x37\x51\xfa\x7e\xa4\xaf\x8f\xd8\xcc\x95\x0f\xc9\x58\x18\x2e\x31\x0d\x6e\x0f\x12\xd4\xb1\x8e\x37\x24\x5f\xbf\x1c\x1e\x3f\x2a\x33\xeb\x45\x14\xfd\xf5\x6c\x7d\x33\x2e\xf3\x2d\x15\xbc\x38\x0a\xf5\x15\x7b\x92\x8c\x2e\xe4\x54\x1f\x8f\x7e\x54\x08\xd8\x7b\x9c\x4b\x52\x94\x68\x10\x38\xb2\xe6\x63\x96\xc7\xca\x61\x0c\xf1\x3a\x53\xb8\x57\x18\x78\xbb\xe4\xe0\x38\x13\xaf\x6e\xed\xa4\xf5\xf7\x9c\x87\x89\xb3\x76\x88\x59\x16\x2f\x84\xef\x23\x82\x91\x59\x28\x89\xeb\x46\x23\xc9\xfe\x79\xd9\xf0\x68\x7d\x21\x3b\x67\xee\xc5\x18\xc8\x16\x76\x4e\xa6\xc1\x68\x83\xa1\x2d\x3f\xa4\x56\xbd\xcd\xcb\x1f\x88\xa9\x6f\xd8\xbb\xb9\x7b\x32\xa4\xf1\x11\xf5\xd0\xf5\xd1\x06\x9d\x1d\xe7\x22\x39\x15\x0a\x0e\x26\xbc\x3c\x34\x77\x89\xdb\x50\x39\x8a\xb0\x43\x92\x53\x41\xf3\xf1\x3a\x1d\x73\x33\xa9\xfb\x5f\x98\xc3\x67\xc0\x46\xeb\x37\x47\x9d\x7c\x37\x8c\x81\x6f\xfe\x05\x00\x00\xff\xff\x71\x5e\x18\x1b\xb3\x0a\x00\x00")

func compiledExecutorAbiBytes() ([]byte, error) {
	return bindataRead(
		_compiledExecutorAbi,
		"compiled/Executor.abi",
	)
}

func compiledExecutorAbi() (*asset, error) {
	bytes, err := compiledExecutorAbiBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "compiled/Executor.abi", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _compiledExecutorBinRuntime = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x5c\x09\x92\xea\x38\x0c\xbd\x92\x24\x5b\x8b\x8f\x13\x27\xf1\xfd\x8f\x30\x25\xdb\x81\x84\xb0\x05\x06\x9a\xa9\x9a\xa6\x7e\xc3\x37\xb1\xad\x68\x7d\x92\x95\x16\x30\x10\x88\xc0\x24\x00\x31\x08\x82\x20\xc0\x30\xb3\x0a\x00\x04\xd6\x11\x10\x5e\xfc\x49\x00\x51\x42\xe9\x3f\x28\x06\x42\x73\x41\x53\xc1\xe8\xbb\xe4\xc0\x6a\x20\x01\x06\x50\x8d\x29\xd6\x51\x84\xb9\x8f\xce\x34\x24\x99\xb4\x8d\x32\xb6\x51\x0a\x73\xc0\x39\x85\x36\x6a\xd4\x47\xf3\xa8\x40\x83\xb5\xd1\x91\x97\xd1\x22\x0a\x36\xd4\x51\x02\x6b\xa3\x71\xd4\xc2\x73\x80\x3a\x1a\x78\x19\x9d\xe6\x88\x91\xb0\x8d\x5a\x6a\xa3\x8a\xa9\xc0\x08\xa9\x8e\x46\xea\x94\x0d\x11\x6d\x18\xa8\xb4\x51\x2e\x6d\x74\x4c\xb3\x71\x1e\x1a\x65\x31\x03\x2b\x67\xe7\xa1\x41\x99\x38\x87\x68\x80\x5c\xef\xba\x34\xde\xb6\x71\xae\xfc\x2e\xd1\xb9\x6f\x10\x04\x82\x21\x60\x02\x03\x73\xee\x9f\xb8\xf7\xe8\x07\x25\x81\x00\x81\xcf\x4d\x94\x30\x01\xd7\x97\x20\x30\x0e\x2c\x4e\x4b\x04\x46\x03\x23\x67\xa6\xbf\x0c\x5d\xea\x75\x0e\xd6\x6b\xfb\x15\x09\x21\x24\x28\x61\x45\x35\xe2\xb0\xa3\x1a\x63\xf9\x24\xd5\xa1\x52\x0d\xb0\xa6\x82\xa7\x3d\x15\xae\xbf\xd7\xa8\xf0\xeb\x30\xdd\xd9\x41\x07\xdb\xef\x60\xf3\x7e\x87\x31\x7c\xf0\x3e\xc7\x41\xf7\x54\x4c\xb8\xa3\x82\x40\x3e\x48\xc5\xcc\x65\x47\x05\x61\xdc\x53\x11\xf4\x35\x6e\x23\xa8\x6e\xb4\xd0\x44\xf7\xf4\x5d\x1b\x3b\x6b\xa9\xe9\x91\x7b\x3d\x72\xed\x6a\x0f\x11\xa8\x94\xc0\xc5\x38\xdf\x18\x8f\x7b\x6b\xb2\xf0\x05\x3a\x3b\x9f\x8d\xcc\xfd\x15\x31\x59\x30\x34\x64\xdc\x5a\xb5\x01\xe3\x59\x26\x06\x16\xcc\xb5\x19\x38\xfb\xf5\xd8\x24\x1d\x50\xdd\x87\x19\x41\x9d\x6f\x11\xfa\x1a\x4d\xc2\x4d\xf2\x65\x74\xf9\x71\x97\x68\xaa\xff\xda\xf7\x02\x58\xbd\x7b\x5b\x2b\xc6\xbe\x56\xf0\xbd\xa5\xf2\xa3\xee\x1f\xaa\x77\x07\x18\x20\xb8\xa6\x5c\x78\x9f\xcc\x90\x6c\x59\xfd\xfc\xba\xe3\x93\x82\xec\xf5\x33\xd8\xab\xfa\x89\xe3\xb8\xb3\x80\x90\x78\xb7\x43\xc4\x1b\xfe\xe6\x1d\x3b\xf4\xf9\x2b\x29\x91\xcb\x77\x33\x52\xa3\x34\x16\xc0\x2a\x15\xe7\x46\x84\xce\xbd\xc6\xa1\x26\x8b\x16\xc9\x0d\x52\xe8\xeb\xe2\x5a\x2b\x2d\xb8\x5c\x2c\x06\xf5\x1d\x9a\xcf\x3f\xc9\x13\xeb\x0c\x5a\x71\x84\xcb\x45\xdc\x58\x78\xb8\xbc\x1f\x88\x1f\x31\xec\xe3\x47\x74\xb8\x81\x63\xb4\xcb\x5d\xae\xd9\xd9\xe3\x1d\x24\xef\x77\x18\xe6\xcf\xc8\xea\xa1\x36\x8d\x9c\x77\xda\x14\xf3\xb8\xa7\xb0\xe0\xe7\xbc\x3a\x01\xca\x86\xb7\xe1\xb6\x04\xaf\xa2\x02\xba\x65\x83\x02\x4d\xfb\x5c\xd7\xaa\x37\x21\xbf\xc6\x3f\x51\xfd\x5d\xa5\x15\x13\x2c\x16\x5f\x91\xe0\x22\x51\xa7\x08\x81\x23\x39\x85\xb1\x47\x05\x00\xc3\x23\xf7\x8c\xdd\xef\xfa\x4a\x45\x9d\xaf\x4e\xa3\x96\x38\x47\xc0\x31\xcf\xaf\x62\xd6\x76\xf7\x10\xdd\x02\xf7\x3e\x56\x80\xd6\x16\x05\x5a\x84\x94\x25\xc9\xa8\x51\x92\xcc\x61\x20\xf0\x77\x15\x41\x19\x25\x49\x24\x90\x20\x45\x66\x8d\x4a\x82\x12\xd4\x47\x50\xa2\xf8\xff\x59\xc3\x79\x35\x2d\x1a\x5e\xa5\xfa\x4c\x7b\x93\xd6\x0d\x7b\x99\x16\xc9\x01\x18\x7d\x3e\x46\x25\x38\x7f\x5e\xe9\xc6\x0d\xcd\x38\xc9\x53\xa6\xf2\x45\x79\xa6\x47\xf2\x54\x91\xd2\xfe\x27\x7a\x43\x9a\xa3\xcb\xd2\xa5\xaa\x69\x2d\x4f\xff\x4e\xa3\x46\xbf\x52\x4c\x58\xe2\x47\xe4\x89\x27\x99\x7e\x01\x77\x5c\x97\xe9\x22\x4d\x43\x8e\x86\x2e\x4f\xa0\xe6\x1f\x2d\xb8\x54\x81\x50\x13\x30\x3b\x1e\x39\x44\x63\x89\x61\xcc\xf3\x98\x67\xb5\x22\x63\x66\xa1\x29\xe7\xac\x5c\xe6\x09\x33\x84\x62\x01\xd5\x20\x24\x55\xc9\x96\x46\x18\x59\x2d\x0e\x90\x12\x0b\xf2\x34\x85\x70\xf2\x7d\x2e\xdb\xb7\xa4\x71\x96\x47\xe3\xc3\xa5\x34\x06\xf7\x96\xdd\x97\x89\xa3\x9d\x2a\x91\x3b\x31\xf3\x2a\x27\xdb\xe7\x2b\x36\xf2\x24\x5a\x46\xec\x56\x64\x3c\x7e\xcf\x8a\x30\x3f\xb4\x22\x50\x92\xa2\x20\x45\x83\x5b\x0c\x81\xcc\x6e\x57\x9e\xd6\x48\x51\x96\x79\x2d\x8f\x0d\xa7\x6f\x6b\x7e\xe3\xf1\x3d\x5c\x72\x93\xc7\x38\x3f\xf4\x43\x56\xa6\x2f\x72\x70\x78\x81\x83\xac\xae\xc7\x41\x59\xe3\xa5\x3e\x3f\xc5\x41\x82\x14\x06\xfb\x43\x6d\x8d\x04\xa1\x15\x77\x04\x21\x65\xfe\x22\xbf\x1f\xfb\xfd\xab\xfc\x56\x90\x54\xbd\x7d\xdc\xef\xf7\x61\x8d\x1d\x6f\x69\xec\xf2\xfb\x1d\x29\xe2\x74\x7f\xf5\x26\xa5\x2a\xa7\xc1\xd2\x4f\x79\x16\x54\x96\xa2\x3e\x3e\x11\xb8\x27\x71\x79\xf9\xf7\x1a\x44\x24\x6d\x65\xf5\xa4\x9c\xf0\x4d\x6e\xce\xcf\x47\xc4\x97\xb5\x02\x6f\x59\xdf\xa7\x50\xc0\xcb\x3c\xa1\x25\x4b\xad\xf9\x27\x70\xac\x55\x81\x5a\x1b\x70\x7f\xdb\x69\x77\x5f\xe0\x2b\x52\xaa\x19\x51\x1d\xcf\xa9\xd5\x67\x01\x4b\xad\x4c\x67\x71\x9f\x5c\xaf\xf7\x7c\x86\xa3\xe7\xc1\x16\x98\x12\x2e\x32\xed\xb3\x84\x73\xcb\x72\xd3\x29\x43\xa1\x9e\xa1\x24\xe0\xdc\xe4\xc2\x94\x3a\x27\x97\x1c\xca\x57\xc5\xba\x86\x66\x56\x73\x5a\x42\xaf\x6f\xb4\x9c\x39\xb7\x6c\xb9\x69\x0e\xc0\x39\xb7\xf2\xfc\xad\x72\x47\x78\x28\x5d\xb7\xba\xc5\x78\x8e\xfb\x3d\x44\x1b\xdf\x8c\x24\xc9\x11\x2e\x41\xcd\x4f\x44\x78\x93\xa1\xd0\x3e\xd2\x1c\xa5\xfd\x11\xa2\x6d\x19\xa5\x0b\x52\x0b\xce\x0a\x49\xa7\x81\x88\x73\x2e\x33\x87\x6c\x11\x03\x42\x9c\xa7\x52\x26\x53\x91\x19\x46\x32\x4d\x14\xc7\x11\x47\x0a\x6e\x52\x2a\x16\xd0\x38\x93\x6d\xd1\xdf\x9d\x68\x79\x84\xf6\x07\xe8\x0f\x61\x1c\xca\x26\xb3\xfd\xe1\x7c\x4b\x10\xa6\x24\x5f\xd4\x4d\x7e\x3b\xdb\x5a\x50\x63\xc5\xf2\x6b\xdd\x7c\x1d\xd7\x6f\xe5\xfb\x20\xdb\x82\xff\xb3\xad\x27\xb3\xad\x28\xfc\x85\x6c\x0b\x61\x16\xbd\xa8\x24\xfd\x9d\xb5\xdd\x8c\xc9\x1b\x9b\x2b\x0c\x3f\x15\x0f\x3c\xfb\xca\xd5\xb2\xd4\x3d\xbf\xa3\xa9\x93\xff\x2f\x92\x5d\x7a\xd5\xe2\x6a\xe4\xd8\xd8\x5c\xf1\x08\xa1\xf4\x0e\xed\xcf\xd8\x5c\x8b\x09\x7f\x66\x71\x5d\xaa\x87\x30\x5d\xc3\x02\x68\x78\x4b\x17\xac\x57\x6b\xa5\xee\x0a\xa1\x7e\xbe\xb3\x43\x9b\x75\xde\xa3\x9d\xaa\x81\x18\x86\x43\x56\xee\xb6\x32\x8f\x09\xea\x7e\xab\xd3\xf9\x8a\x98\x0e\xfa\x8b\x79\x9c\x6d\x8c\x58\x34\x26\x24\x65\x8c\x32\x60\x29\x85\x4b\xae\x01\xbc\x9e\x49\xe4\x32\xf9\xbd\xea\x30\xcd\xb3\x7b\x18\x82\x88\x64\x71\x12\xce\xbc\xf6\x17\x5b\x7d\x7b\x5d\x97\x1e\x56\x67\xc2\xa3\xca\xb5\xcf\xb6\xc3\xf9\x6d\x5a\xcf\xb1\xf7\x50\xf9\x7a\xad\xdb\x79\xdf\xe6\xaa\x9b\xf9\xdb\xe6\xaa\x9b\x55\x8f\x7e\xd5\xbf\x92\x53\xf4\xb5\xea\x29\xd6\x73\x58\xff\xd0\xd9\xd6\xfe\x64\xeb\x50\x4e\x81\x38\xd2\x3a\xa7\x40\x4c\xfa\x38\xa7\xa8\xb3\xde\xcc\x29\x10\x07\xbe\x9d\x53\x9c\xcf\x55\x4d\x7f\xa7\x8e\x88\xce\xdb\x5f\xca\xf6\x3f\x51\x47\x04\x83\xf0\xc7\xb1\xe5\x3e\x62\xc0\x10\xc3\x2f\xd5\x22\x17\x2c\xb0\xc4\xff\x8e\x16\xd0\xaf\xdb\x57\xc7\xfe\x7b\xb5\x48\x0c\x25\xff\x5f\x8b\xbc\xca\xe7\xd0\x3e\xff\x99\xbd\x3c\x3c\x3f\xc4\x38\x7d\xb3\x3e\xf9\x4a\xdd\x7e\x63\x3d\x2f\xd8\xca\x3b\xf5\xc9\x3f\x97\xdf\x17\x2a\xa3\x1d\x11\x3d\x8b\xbe\x7b\x44\x3f\x84\xbd\x3f\x56\xa5\xba\xa3\x1b\xcf\xea\xeb\x73\x67\x94\x3d\xa7\x3a\x84\xec\xce\x5d\x17\x28\xf6\xcd\xf3\x45\x3d\xda\x75\xa1\x51\x50\x49\x54\x58\xaf\xf0\xf0\x59\x5c\x20\xb7\xa3\xca\xfa\x6c\x64\xc1\x4a\x8a\x5f\xac\xa5\xe1\xc3\x5a\x9a\x23\xa3\x7d\xac\xbe\xd5\x65\xf2\xdf\xc7\x4a\xe6\x68\x5e\x73\x62\xe5\x53\x95\xee\xf7\xe2\x14\xe7\xae\x2d\xc6\x5f\xc4\x74\x34\x1d\xc7\x74\xbd\x0e\x74\xb5\x22\xbb\x3d\x15\x58\xaa\xb3\xf7\x50\xe0\x7d\xda\x1f\x55\x81\x22\x2d\xd5\xc5\x73\x4e\xf5\x2c\xb2\x53\x7b\xe1\x19\x86\x5e\xe7\x02\x73\x3e\x7e\xec\x44\xed\xde\xd3\x15\x9d\x02\x8c\x97\x9d\x78\x35\x4f\x46\x0b\x50\xcf\x9c\x5a\xbe\x19\x7b\x25\xe3\x74\xc6\xb6\xeb\xfa\x75\xeb\x25\x8f\xb1\x0b\xc6\x4d\x38\x78\x1e\xcc\xd8\x35\x04\x96\xae\x50\x59\x77\xfe\xd6\x39\x10\x9c\x02\xd7\xd9\xc2\x3d\x7e\x5c\xe9\xea\x35\x47\xb2\xc4\x1e\x1b\xd0\x62\x7d\x07\x23\x54\x63\xa6\x4d\xaf\x29\xf0\x0d\x49\xd7\x3c\x1a\xfe\x38\xf3\x8d\x0b\x7f\xbe\xda\xff\x51\x1e\xda\x67\x54\x56\xa8\xf1\xad\x9d\x6f\xd7\xaa\xec\x15\x74\x99\xdc\xee\x9e\xf3\xe6\x33\x5c\xab\xb0\x44\xba\xdf\x87\x7f\xcc\xa7\xae\x64\x84\x38\xc4\xe9\x61\x4c\x45\x22\xa4\xa6\x65\x17\xf3\xab\x5e\xec\xc7\x2e\xba\xef\x0f\xf5\xce\xae\xe6\xc5\x85\x67\xaf\x6a\xde\xd2\x3f\x7f\xd6\xc2\x0b\x4c\xb9\xe3\xea\x0a\x61\x5e\xe1\xf8\x1a\x09\xd3\x7e\x75\xdb\xae\xfe\xfc\x5d\x9f\x77\x3d\xc2\xa9\x35\x35\x71\x47\x0d\x8e\x47\xf0\xb3\x80\xec\x57\x98\x8e\xad\x60\xfb\x15\x0e\x75\x5d\x0c\xeb\xf9\x57\x2b\xfc\xdf\xe4\xe8\xb8\xa6\x86\x9a\xd7\x5e\xfb\x70\x41\xcc\xd3\xdc\x73\x16\xa4\xc0\xda\x9e\xc6\x68\xdd\xde\x9f\xca\x46\x36\xde\xe5\x03\xd9\x88\xf5\x4e\x0a\xbf\xaf\x1a\x1b\xe4\x94\xdd\xde\x46\x79\xbd\x83\x1c\x47\xf7\x83\x9b\x73\xbf\x43\x71\x7a\x95\xcb\x8c\x85\x7e\xa9\xda\xb3\xeb\x20\xbf\x40\x66\x77\x78\xfc\x20\x97\x71\x4c\xb1\x68\xca\xea\xfe\x27\xfd\xed\xfb\x4f\xe2\xd1\x6e\xae\x3d\x5d\x51\xd3\x3b\xf7\xdf\xcf\x87\x3f\xd6\x23\xf5\x18\x9d\xd4\x93\x8a\x95\x04\x04\x71\x0e\xdf\xe4\xbf\xbd\x90\x09\xb0\x9a\x24\x0d\x1a\xf7\xd9\xe3\x73\xfc\x2f\xe5\xc9\x5c\x7a\x41\xa7\x73\xfe\xad\xfe\xe5\x28\xa5\x66\xd3\x93\xa0\xcc\x9a\xee\xe7\xd5\xcf\xf1\x24\x76\x1f\xbf\xc6\x5e\xe7\x5a\xd7\x46\x7b\x70\xc1\x38\x0d\x1d\xff\xa5\x06\x6f\xa3\x6e\x3a\x45\x1e\x0f\x23\x17\x38\xe5\xf0\xb9\x79\xea\x59\xce\xb1\xd3\xf3\x57\xea\x77\x82\x58\x86\x68\x74\xf8\xec\x9c\x02\xde\x38\x3b\x3f\xf4\xfc\xd2\xbf\x7b\x76\xde\x9e\x28\x7a\xbf\xf7\xe9\x4e\xd5\x70\xf5\x6c\xc3\xf3\xa7\xe7\x2e\xbb\xfb\xe7\xca\xcb\xe9\x33\x83\x55\xcc\x7f\x4c\x1e\xc7\x32\x91\xc5\xdf\x12\xcc\xc3\x2f\x9d\x10\x6c\x3a\x13\xcb\xbf\x71\x9a\xe6\x9c\xd4\xc2\xcd\x3b\xf9\x9a\x51\x93\x82\xf0\xb1\x3b\x53\x3d\x5a\x37\x39\xda\x29\x20\x61\x50\xd4\x39\xc7\xb9\x3d\x97\x5c\xef\x23\xac\x2d\xeb\x9d\xbf\x3f\x71\xaa\xe1\x34\xd9\x7c\xe3\xa9\xec\x6f\xf4\x9d\x9d\x6a\x41\x57\xbb\x8f\xd5\x20\x64\xe4\xd6\xeb\x40\x58\x64\xfb\xcc\x29\x0f\x05\x4f\xdf\x12\x0c\xac\x61\xea\x55\xdd\xb9\x7d\xea\xd7\x9d\x5f\xdb\x5e\x04\xaa\xb5\x9f\x6e\xb7\x0d\x51\x76\xab\x22\x4a\xac\x65\xe6\x0c\x31\xb5\x27\x8a\xfb\xec\xff\x86\x26\x4e\x25\xc9\xa0\x71\xfc\x5f\x13\x9f\xdd\xe3\x90\x26\x86\x90\xef\x68\x62\x88\xe5\x39\x4d\x7c\xb6\xd7\xe7\x5a\x87\xce\xb9\xcb\xa8\x76\x03\x39\x6e\x20\xa3\xa5\x0f\x88\x42\x7b\xd6\x80\x2b\x76\xa8\x08\x2c\x98\xef\xa0\xc6\x5c\x69\x1c\x65\xa1\x00\x3a\xba\xf1\x6f\x8c\x70\xf9\x56\x13\x56\xf4\xe3\xd7\x20\x62\x1f\xaf\x3d\x3f\xb5\xca\xca\xe7\x8e\xa2\x55\x8f\x10\x52\x18\xea\x93\xf6\x4b\x3e\xef\x23\x53\x58\x32\xfd\xe9\x9c\xe9\xd7\xbc\x97\x42\x49\xd5\xb6\x72\xad\xae\xf6\x5d\xca\xf2\x97\x0a\x96\x38\xdb\xbb\x10\x01\xeb\x1a\xd3\x7a\x0d\xff\x0d\x30\x38\x6c\x21\x1d\x74\x50\x0a\xc0\x46\xbe\x62\x9e\xc9\x62\xa1\x51\x6d\x1c\xe2\x14\x03\xd8\x98\x25\x33\x95\x50\x34\x1b\x45\x89\x81\x4a\x2c\x71\x94\x32\x1b\x65\x04\x99\x63\x7d\x94\x3b\xcd\xcc\xce\xfa\x7f\x02\x00\x00\xff\xff\x10\x4c\xfc\x03\x50\x48\x00\x00")

func compiledExecutorBinRuntimeBytes() ([]byte, error) {
	return bindataRead(
		_compiledExecutorBinRuntime,
		"compiled/Executor.bin-runtime",
	)
}

func compiledExecutorBinRuntime() (*asset, error) {
	bytes, err := compiledExecutorBinRuntimeBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "compiled/Executor.bin-runtime", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _compiledExtensionAbi = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xd4\x93\xc1\x4a\x03\x31\x10\x86\xdf\x65\xce\x39\xad\x5a\x64\x8f\xa2\x07\x0f\x82\xd8\x82\x87\xb2\x87\xc9\xee\xac\x84\xcd\x4e\x42\x32\xa9\x0d\xa5\xef\x2e\x5b\xaa\x56\x11\xba\x1e\xdc\xd6\x5b\x20\xf3\x93\x2f\x3f\xdf\x2c\x37\x50\x3b\x8e\x82\x2c\x50\x4a\x48\xa4\xc0\xb0\x4f\x12\xa1\x5c\x56\x0a\x18\x7b\x82\x12\xc4\x09\xda\x79\xf2\xde\x66\x50\xe0\x92\xec\x27\x36\xef\x03\xa0\x40\xb2\x1f\x4e\xc9\xb0\x14\x57\x33\xd8\x56\x0a\x3c\x66\xd4\x96\xa0\x6c\xd1\x46\x52\x10\x05\x85\x1e\x92\xa0\x36\xd6\x48\x86\x12\x56\x86\x5e\x3f\xb3\x6d\xe2\x5a\x8c\x63\xd8\xaa\x71\x58\xeb\x1b\xeb\xea\xee\x89\xda\x63\x54\x3a\x0b\xc5\xeb\x3f\x84\xfa\x78\x93\x53\xff\x73\x19\xfb\x7b\x3d\x10\x2f\x4c\x4f\xa7\x2f\xf2\x77\xcc\xf7\xb7\xa3\x4a\xbe\x28\xce\x86\x78\xb1\xb3\xb6\x76\x61\x54\xd7\xb3\xcb\x89\x9c\x7d\x0c\x6e\x45\xcd\xb3\x0b\xdd\x7f\x53\x60\x6e\x5e\x98\xc2\x31\x6a\x6c\x9a\x40\x31\x4e\x41\xdd\xa0\xe0\x37\xff\xbe\x42\x63\x47\x85\x1e\xbe\x72\x72\x75\x0f\x0d\x38\x87\x55\x3a\xe4\xb9\x5b\x7b\x13\x70\x97\x99\xc4\xc8\xea\x2d\x00\x00\xff\xff\x46\xea\x9b\x84\x76\x06\x00\x00")

func compiledExtensionAbiBytes() ([]byte, error) {
	return bindataRead(
		_compiledExtensionAbi,
		"compiled/Extension.abi",
	)
}

func compiledExtensionAbi() (*asset, error) {
	bytes, err := compiledExtensionAbiBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "compiled/Extension.abi", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _compiledExtensionBinRuntime = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xd4\x58\x09\x72\xec\x2a\x0c\xbc\x52\x4b\x42\x0b\xc7\x01\x63\xee\x7f\x84\x5f\x18\xcf\x9f\xc5\xa9\x79\xb1\xf3\x5e\x52\x99\x49\x2a\xae\xc6\x68\x69\x35\x20\x62\x08\x18\x12\x94\x0d\x48\x62\x04\x23\xa0\x24\x75\x03\x20\xea\x0b\x08\x17\x3f\x19\x48\x26\x7d\xff\x90\x05\x4c\xa8\x53\x04\xf5\xa0\xb4\xf9\xc9\xea\x03\x65\x5f\xb4\x8c\xb1\x0d\x6d\x69\xa2\xda\x56\xee\x4a\x6d\x43\x49\x74\xa2\xce\x51\x4a\x67\x9e\xa8\xdb\x44\x83\x3d\x87\x47\x9a\x68\xed\x3b\xda\x5d\x9c\x31\xed\x32\xed\x76\x1b\xaa\x37\x5f\x64\xa2\xb2\xbf\xdb\x5c\xc1\xcd\xa6\x05\x2e\xcb\x0d\x35\x6b\x92\xa6\x05\x11\x9a\x68\x2f\x46\xb5\x38\x4d\xd4\x92\xba\xd6\xc1\x57\xa0\x37\xad\x92\x02\xa4\x23\x93\xaa\x93\xc7\x89\xeb\xc6\x6d\x5d\xc7\x9c\xe8\x6a\x63\x4e\x82\x52\x20\x38\x68\x54\x80\x01\xca\xa4\x50\xdc\x46\x32\x41\x32\xba\x3c\x5a\x5d\x71\xb4\xba\x66\x23\x24\xd1\x67\xab\xee\xfd\xe4\x87\x32\xd9\xb5\x59\x27\x32\xa0\x44\x87\x0c\xc8\x30\x14\x18\x10\x83\x04\x81\x32\x02\x01\xd1\x8c\xdd\x2a\x32\x67\xca\xd0\xed\x3b\xb2\x6d\xf5\x32\x87\x14\x7c\x8c\xa0\xd0\xc9\x08\xb4\xa4\xe7\x08\x86\xc5\xc1\xc5\xed\xef\x99\x88\x96\x7a\x8c\x68\x2d\x27\x23\x32\x93\x97\x88\x0e\xb5\x24\xfb\x08\x3b\x11\x29\xf3\x51\x7f\xcc\x43\x7f\xce\x7c\xb9\x22\x9c\x8e\xf9\xb3\x9d\xcd\xdf\x97\x78\x59\x01\xf2\x69\x0d\xdb\x99\x77\xcf\x64\x56\xe3\x90\x99\x90\xfc\x29\xb3\x60\xd0\x0b\xb2\xed\xd5\xd4\xc7\x5a\x61\x6c\xbe\x12\xf6\x28\xa6\xff\x8c\xa0\xfd\x99\x03\x59\x26\x3b\x41\xf7\x68\x43\x42\xb6\xca\x24\xf1\xe1\x61\x46\x7f\xfb\x66\xda\x66\xf0\x03\xa3\x11\xfe\xd7\x34\x2e\xd2\x8e\x4c\x24\x33\x42\xce\xfd\xef\x79\xf1\xa3\x3e\xc5\x87\x3e\x4b\xd2\xb3\xfa\xdc\x4e\x41\x9c\x51\x86\xc9\xb2\xda\x28\xd3\xcd\x0f\x3d\x9e\x81\x5f\x39\x4f\xb1\xc7\x8b\x34\x15\xf0\x7f\x1e\x32\x34\xb4\x65\xec\x01\xa9\xa4\x37\x26\xfa\xcb\xf9\xa3\xa5\xd3\xff\xa3\x09\x59\x5d\xda\x1c\x97\x75\x3e\xed\xef\xe1\xce\xc6\xc0\x19\x41\xb4\xcf\xa2\xfe\x68\xf3\xae\xdd\xa1\xbe\x8f\x56\x65\x9e\xbf\x76\x8d\xcb\x22\x29\x16\xa3\xf2\xe3\x5c\xa6\x5c\xdf\x71\x59\xfa\x15\x2e\x17\xfd\x56\x2e\x13\xf7\x1e\xb2\x84\xec\xd9\xf2\xbf\x60\x73\x5b\xbd\xf2\xe8\xf7\xfe\x7c\x5c\x6f\x9f\x60\x5e\x35\xde\x30\xaf\xb6\x5c\x60\x5e\x9f\xcf\xff\x3f\x33\xff\xd1\x99\x99\xe7\x8e\x39\xc6\x2f\x56\x84\xbc\x85\xf0\xd2\x7f\x59\x45\x8c\xe9\x4d\x45\x6c\x74\xea\xa7\x2b\x62\xcf\xe7\xff\x27\xd7\xc2\x97\xd8\xaf\xc5\x64\x49\x61\xbf\x8d\xfd\xd7\xfe\xff\x99\xfd\x9e\x2e\xb0\xef\x28\xdf\xcd\x3e\x24\x52\x62\xa6\x1f\xdf\xd9\x3d\xde\xed\x2f\x9e\xaf\xec\x2f\x5e\x4f\xee\x2f\x5f\xdb\xd9\xbd\xb7\x5e\x12\xc7\x2f\x53\x72\xa4\x77\xfd\x49\xe8\x95\xfe\x24\xec\x4a\x7f\xf2\x25\x25\xe7\x5c\x98\x56\xd2\x7f\xce\xfe\x1e\xff\xe8\x5b\x21\xc1\xca\x21\x5b\x6f\x4f\xcf\xec\x3f\xe7\x3a\xf8\x1f\x91\x01\x5a\xc7\xfb\x3b\x4f\x99\xb6\xff\x65\x8c\x3b\xc0\x98\x1f\x09\xbb\x8d\xc9\xd8\xec\xfd\xbb\x0d\x4e\xf4\x49\xa3\x73\x7c\x34\xb8\x64\x7b\xa5\xb2\xac\xbb\x2d\x19\xbe\x6d\xbb\x67\x6c\xfe\x65\xdc\x62\x01\x14\xc8\x07\x5d\x7c\x55\x64\xbe\xd5\xf2\x13\x7a\xc9\xda\xde\xe8\x25\x3b\x5d\xd0\x4b\x0e\xff\x6e\xbd\xb8\xb7\xb4\xde\xd5\xf2\x73\x3b\x5f\xc1\xbb\xf5\x57\xe8\xca\xfa\x2b\xfc\xad\xf7\x83\xd0\xdc\x6a\x22\xfc\x3c\x97\xe5\xdd\xfd\xa0\xd4\x2b\xf7\x83\xd2\x4e\xde\x0f\x1e\xb3\xbf\xf1\x0a\x14\x32\x35\xf6\xe2\xc5\x59\x46\xeb\x8b\x28\x5d\x6a\x58\xce\xab\x60\xfc\x78\x17\x4b\x58\x90\xd7\xb5\x45\x2c\x89\x13\xf7\x04\xea\x25\xa7\xdc\x13\x15\x52\xd5\x4a\x85\x5a\x5f\x4a\x6f\x6d\x01\x38\xff\x17\x00\x00\xff\xff\xe0\xec\x34\xc3\x3a\x16\x00\x00")

func compiledExtensionBinRuntimeBytes() ([]byte, error) {
	return bindataRead(
		_compiledExtensionBinRuntime,
		"compiled/Extension.bin-runtime",
	)
}

func compiledExtensionBinRuntime() (*asset, error) {
	bytes, err := compiledExtensionBinRuntimeBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "compiled/Extension.bin-runtime", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _compiledExtensionnativeAbi = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x95\x41\x4b\xf4\x30\x10\x86\xff\xcb\x9c\x73\xea\xf7\xb9\x48\x8f\xa2\x07\x0f\x82\xb8\x82\x87\xa5\xc8\xb4\x9d\x4a\x68\x3a\x09\xc9\xa4\x6e\x59\xf6\xbf\x4b\xcb\xaa\xac\x16\xb7\x08\x76\x7b\xcb\x61\x26\xf3\xf0\xcc\x1b\xb2\xd9\x41\x61\x39\x08\xb2\x40\x2a\x3e\x92\x02\xcd\x2e\x4a\x80\x74\x93\x29\x60\x6c\x08\x52\x60\x14\xdd\xd2\xb3\x6c\xef\xbd\x6d\xa9\x7c\xb2\xbe\x06\x05\x36\xca\xa1\x72\xf7\x5e\x08\x0a\xa4\x73\xfd\x29\x6a\x96\xe4\x62\x05\xfb\x4c\x81\xc3\x0e\x73\x43\x90\x56\x68\x02\x29\x08\x82\x42\x77\x51\x30\xd7\x46\x4b\x07\x29\xb4\x9a\x5e\x3f\x7b\xab\xc8\x85\x68\xcb\xb0\x57\x3f\xe0\x7d\x0c\xe5\xd8\x1c\xcf\xfd\x97\x0c\x63\x8f\xe1\x73\x63\x8b\xfa\xf6\xfa\x14\x77\xde\x09\x85\xc3\x05\x7f\xc3\x3d\xa2\x75\x09\x58\xbf\xd1\xb9\xd6\x2f\x4c\xfe\x14\x3b\x96\xa5\xa7\x10\xe6\x55\x7a\xb3\x75\xda\xe3\xd0\x3a\x21\xa9\xf3\x98\x2d\x51\xf0\xcb\x4a\x47\xcd\x62\x4d\x49\xde\x3f\x9e\xb3\x87\x62\x44\xec\x55\xbf\xf8\x07\xaa\x26\xc1\x5d\x2e\x2c\xb0\x8f\xba\xa1\x29\x79\x58\xfd\x5f\x1a\xb8\x15\x34\xeb\xc2\xfa\xf3\xe3\x7f\xcf\xc4\xc0\x16\x9d\x33\xdd\x3c\xbf\x42\xf6\x16\x00\x00\xff\xff\x61\x0a\xdc\x90\xb6\x06\x00\x00")

func compiledExtensionnativeAbiBytes() ([]byte, error) {
	return bindataRead(
		_compiledExtensionnativeAbi,
		"compiled/ExtensionNative.abi",
	)
}

func compiledExtensionnativeAbi() (*asset, error) {
	bytes, err := compiledExtensionnativeAbiBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "compiled/ExtensionNative.abi", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _compiledExtensionnativeBinRuntime = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func compiledExtensionnativeBinRuntimeBytes() ([]byte, error) {
	return bindataRead(
		_compiledExtensionnativeBinRuntime,
		"compiled/ExtensionNative.bin-runtime",
	)
}

func compiledExtensionnativeBinRuntime() (*asset, error) {
	bytes, err := compiledExtensionnativeBinRuntimeBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "compiled/ExtensionNative.bin-runtime", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _compiledMeasureAbi = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x9c\xcd\x31\x0a\xc2\x40\x10\x85\xe1\xbb\xbc\x7a\x4e\xb0\x77\xf0\x04\x21\xc5\x24\x4c\x60\x20\xce\x2e\xbb\x6f\x94\x45\xbc\xbb\x58\xd9\x58\x88\xf5\x0f\xff\xb7\x3c\xb0\xd7\x18\xd4\x20\x0a\x7b\x9a\xc0\xa3\x25\x07\xca\xb2\x0a\x42\xaf\x86\x02\x8f\xb0\x0e\x41\x4d\x7e\x5a\xd3\xa9\xdb\x69\x28\x87\x9e\xc3\x04\x83\x4a\xbb\x24\x75\xf3\xd3\x39\x51\xd0\xb2\x1b\x04\x9c\xed\x3d\x39\x32\x76\x7a\x0d\x3c\xe5\x27\xb4\x26\xff\x41\x6f\x6e\xf7\x6f\xe8\xfa\x0a\x00\x00\xff\xff\x0a\x34\xa0\xdd\xeb\x00\x00\x00")

func compiledMeasureAbiBytes() ([]byte, error) {
	return bindataRead(
		_compiledMeasureAbi,
		"compiled/Measure.abi",
	)
}

func compiledMeasureAbi() (*asset, error) {
	bytes, err := compiledMeasureAbiBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "compiled/Measure.abi", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _compiledMeasureBinRuntime = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xa4\x50\x5b\x72\xc4\x30\x08\xbb\x92\x00\xf3\xc8\x71\x60\xc1\xf7\x3f\x42\x27\x9b\x6c\xb7\xed\x4f\x67\x5a\xf1\x91\x58\x68\x6c\x49\x86\x80\x61\x41\xd9\x80\x25\x46\xe7\xe9\x50\x37\x00\xa2\xfe\x00\xe1\x8f\x38\x80\x65\xb2\x6f\x90\x05\x4c\x78\x22\x1f\x12\x4a\xcb\xb0\x46\xfd\xe4\x0e\x54\x61\x0d\x4e\xce\x58\x5d\xeb\x7c\x3b\xb0\x5b\x4b\x56\x80\xd4\xa0\xb7\xa3\x8b\x55\xd8\x73\xdc\xd4\xb4\x80\xb7\xce\xfa\xa7\xce\x97\xc1\xe3\xa5\x3b\xbf\x02\xff\x74\xf5\x1b\xc8\xde\x9e\x9f\x2d\x51\xd0\xd7\x4c\xff\xe9\x07\x1c\x74\xb5\x0e\x3a\x3d\xdf\xf7\x23\x04\x12\x4f\x26\x3c\x20\x45\x7a\x65\xeb\xfa\x9e\x4d\x73\xd3\x6b\x37\xa3\x2e\x7d\x6d\x65\xae\xbf\x5b\x75\x8d\x01\x49\xa6\xc6\x9e\x9e\xce\x02\x0d\x86\x66\xef\x2d\x38\xf6\x50\xce\x91\xdc\x33\x14\xb5\x1a\x19\x9e\xb3\x3b\xcb\x44\x04\x8f\x24\x44\x8d\x4a\x73\x07\x55\xef\x66\x5d\xc5\xd9\x00\x1f\x1f\x01\x00\x00\xff\xff\xba\xde\xe1\x86\x40\x02\x00\x00")

func compiledMeasureBinRuntimeBytes() ([]byte, error) {
	return bindataRead(
		_compiledMeasureBinRuntime,
		"compiled/Measure.bin-runtime",
	)
}

func compiledMeasureBinRuntime() (*asset, error) {
	bytes, err := compiledMeasureBinRuntimeBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "compiled/Measure.bin-runtime", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _compiledParamsAbi = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xa4\x91\xc1\x6a\xf3\x30\x10\x84\xdf\x65\xce\x3a\xe5\xe7\xef\x41\xef\xd0\x53\x8f\xc1\x94\xb5\xbd\x29\xa2\xce\xca\x58\xbb\x6e\x44\xf0\xbb\x97\x1a\xd9\x4e\x43\x8a\x0b\xbd\x09\x66\x46\xfa\x66\x74\xbc\xa2\x89\x92\x94\x44\xe1\x75\x30\x76\x08\xd2\x9b\x26\xf8\x63\xe5\x20\x74\x66\x78\xf0\x85\x1b\xd3\x38\xc0\x21\x9a\x16\xf9\xba\xa8\x70\xd0\xdc\x7f\x9d\xa8\x6d\x07\x4e\x09\x53\xe5\xd0\x53\xa6\xba\x63\xf8\x13\x75\x89\x1d\x92\x92\xf2\xb3\x29\xd5\xa1\x0b\x9a\xe1\x31\x06\xfe\xd8\xb2\x27\x93\x46\x43\x14\x4c\xee\x96\xa9\xa4\x57\xa8\xf5\xd5\xd7\x77\xce\x5b\xba\xce\xca\xe9\xdf\x61\x0e\x2f\x86\x91\x3a\xe3\xcd\x62\x41\xf4\xf0\xff\x69\x86\x2b\x96\xc4\xfa\xad\xd2\xaf\xb0\x25\xca\x62\xda\x83\xbf\x1b\x74\x8f\x7d\x03\x7b\xbb\x03\x7b\xb0\xf5\x6d\x9d\x3f\x6d\x4d\x12\x25\x9f\xa3\xa5\x47\x63\x07\x69\xf9\xc2\xed\x52\xa5\x50\xfc\x38\xfd\x6a\x2f\x37\x15\xff\xfe\x4f\xbc\xcc\x85\x8b\xce\x23\x8b\x62\xaa\x3e\x03\x00\x00\xff\xff\x0d\x22\x41\xf7\x9d\x02\x00\x00")

func compiledParamsAbiBytes() ([]byte, error) {
	return bindataRead(
		_compiledParamsAbi,
		"compiled/Params.abi",
	)
}

func compiledParamsAbi() (*asset, error) {
	bytes, err := compiledParamsAbiBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "compiled/Params.abi", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _compiledParamsBinRuntime = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x54\x0b\xb2\xe2\x38\x0c\xbc\x52\x4b\xb2\x7e\xc7\xb1\x63\xf9\xfe\x47\xd8\x72\x02\x0f\x66\x66\x97\x37\xb0\xf5\x4c\x51\x04\x49\xb1\xba\xdb\x6d\x19\x02\x86\x06\x65\x03\x9a\x18\xc1\x08\x50\x57\x37\x00\xa2\x7e\x80\xf0\xe1\x4a\xa0\x99\xac\xdb\x22\x0b\x98\x8c\x36\xb3\xb3\x3a\xb5\xb3\xcf\xa1\xbe\xa3\x47\x55\x16\x69\xbf\xa2\x43\xae\x68\x15\xd5\x5a\x47\xbb\xa2\x55\xea\x3a\x36\xaa\xc0\x9a\x3a\xa4\x05\x48\x77\xc6\xe2\x42\x7b\xc5\xf5\x64\xe0\x64\x04\x12\x51\xdb\xef\x34\x28\x05\x82\xfd\x0b\xcd\x77\x8b\xec\x9d\xda\xa0\xad\x1f\x03\x94\xa4\x50\xdc\x3b\x26\x41\x12\x4b\x9e\xd1\x8e\xf5\x27\xda\x3a\xb6\xfa\x01\x31\x48\x10\x28\x11\x08\x88\xee\x3a\x4a\xb2\xc4\x6d\x77\x24\xe7\x99\x15\xfd\x3d\xa6\xe7\x67\xb3\x9e\xb9\x59\x03\xcf\x5d\x57\xff\xa3\x2b\xd1\x7c\xaf\xeb\x57\x07\xd1\xfe\xab\xae\xdf\xf3\x3f\xdd\x84\x77\x34\x35\x11\x81\x1c\xc7\x90\xdb\x6e\xf4\xec\xa5\xff\xe3\x4b\xdc\xf0\xa2\x81\x36\xea\x2f\x1e\xb2\x75\x38\x55\xf2\x80\x0c\xd2\x9b\x7a\x94\xf9\xab\x7a\xda\x17\x3d\xb2\x7d\xaa\xcb\xbc\xf2\x52\xd7\xd3\xad\x0e\x0f\x35\x76\x9c\x11\x44\xb7\xb7\x0e\x79\xde\xf3\xa1\xbf\xd2\xbf\xeb\x9e\xd7\x77\xeb\x4e\xa0\x7a\xf2\xf7\x3b\xaa\x8a\xbc\x53\x4d\x8d\xf4\x44\xcb\x71\xa2\xdd\x3c\x7c\xb5\x6a\xa0\x63\xd4\xa7\xf2\x3f\xd4\x8f\x73\xfa\x6c\xae\xdb\x43\x90\xe0\x9d\xa1\xfe\xf0\x53\xc0\x97\xb1\xab\xa5\x1d\xde\x2c\xad\xa4\x33\x4c\x3d\x4c\x4d\x5c\xbd\xd9\x72\x66\x38\x9b\x3a\xed\xba\xfd\x64\xed\xf7\x7e\x8a\x17\xfe\xdc\xd3\xe4\x4d\x6f\xce\xce\x63\x12\x53\x48\xdc\xfd\x29\x3f\xe1\xcf\xed\xca\xfb\x7d\xbc\xff\x3e\xa9\xf3\x7c\xf3\xf8\xee\x36\x7c\xef\x68\x01\xbf\x70\xb4\x90\xbd\x76\xf4\xb5\xe7\xc6\xe2\x6b\xb4\xea\xe3\xf0\x49\x0d\x6c\x54\x9e\xb5\x2a\x7d\x69\x5b\x59\xcb\xa3\xdc\x22\x91\x7d\x2a\x0d\x82\x53\xc4\xcc\xa9\xa3\xc2\xbc\xa4\x09\x2a\xf8\x6f\xe7\x48\xbf\x18\xda\x67\xd3\x64\x8e\xe0\xa1\x59\x5f\xe7\xc5\x3f\x74\x5e\xfc\xdf\xe7\x75\x67\xf5\x17\x33\x47\xa6\xbc\x3a\xa1\xf2\x0f\x66\x8e\xac\xf9\xc1\xcc\xb9\xfe\x19\xd0\xc9\xd4\xd8\xbb\x77\x67\x81\x06\xa3\xb0\x38\x47\x65\x6f\x9a\xab\x81\xab\x32\x2a\x82\x05\xe1\x6b\x80\x0e\x15\x93\x44\x15\x29\x4f\xc1\x9c\x36\x68\xe4\x5c\x39\xd7\x71\x14\x13\xc0\xf9\x4f\x00\x00\x00\xff\xff\x36\x86\x5a\x25\x82\x08\x00\x00")

func compiledParamsBinRuntimeBytes() ([]byte, error) {
	return bindataRead(
		_compiledParamsBinRuntime,
		"compiled/Params.bin-runtime",
	)
}

func compiledParamsBinRuntime() (*asset, error) {
	bytes, err := compiledParamsBinRuntimeBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "compiled/Params.bin-runtime", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _compiledParamsnativeAbi = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x9c\x90\x51\x6a\xc3\x30\x10\x44\xef\x32\xdf\xfa\x4a\x69\x3f\x74\x87\x9e\x20\x98\xb2\x76\x36\x45\xd4\x5d\x19\x6b\xd6\xad\x08\xb9\x7b\x69\x70\xe2\x24\x2d\xb8\xf4\x4f\xa0\x19\xf6\xbd\xd9\x1e\xd0\x65\x2b\x14\x23\x22\x47\xd7\x80\x64\x83\xb3\x20\x6e\x9b\x00\x93\x77\x45\x84\x09\xd3\xa4\x2f\xfa\xa9\x9d\x33\x8f\x08\xc8\xce\x39\x75\x38\x87\x10\xc0\x3a\x7c\xbf\x64\xb7\x1b\xb5\x14\x1c\x9b\x80\x41\xaa\xb4\xbd\x22\xee\xa5\x2f\x1a\x50\x28\xd4\x67\xa7\xb4\xa9\x4f\xac\x88\x98\x92\x7e\x2c\xdd\xbd\x5b\xc7\x94\x0d\xc7\x70\x8d\x36\xb7\x2f\x6c\x97\xab\x6f\x5a\x97\x72\x5b\xa9\xe5\x61\x73\xea\xce\xff\x93\xf4\xae\x4b\xc2\x93\x71\xf3\xf8\x74\x42\xbb\x95\x2b\xca\x1b\xaf\x3f\xb1\x5b\xb6\x73\x68\xcd\xe0\x6e\xdc\x15\x81\x1f\x78\xaf\x77\x78\xbf\xcc\x7e\xed\xf6\xff\xd9\x9b\xaf\x00\x00\x00\xff\xff\x1a\xc1\x4f\x78\x13\x02\x00\x00")

func compiledParamsnativeAbiBytes() ([]byte, error) {
	return bindataRead(
		_compiledParamsnativeAbi,
		"compiled/ParamsNative.abi",
	)
}

func compiledParamsnativeAbi() (*asset, error) {
	bytes, err := compiledParamsnativeAbiBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "compiled/ParamsNative.abi", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _compiledParamsnativeBinRuntime = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func compiledParamsnativeBinRuntimeBytes() ([]byte, error) {
	return bindataRead(
		_compiledParamsnativeBinRuntime,
		"compiled/ParamsNative.bin-runtime",
	)
}

func compiledParamsnativeBinRuntime() (*asset, error) {
	bytes, err := compiledParamsnativeBinRuntimeBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "compiled/ParamsNative.bin-runtime", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _compiledPrototypeAbi = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xd4\x56\x4d\x6f\xe2\x30\x10\xfd\x2f\x3e\xe7\xc4\x6a\xf7\x90\x2b\xd2\xde\x58\xad\x5a\xf5\x84\x10\x9a\x24\x03\xb5\x70\xc6\x91\x67\x0c\x8a\x50\xff\x7b\xc5\x47\x1a\xab\xa4\x4d\x28\x41\x09\x47\xc4\x1b\x67\x9e\xdf\xbc\xe7\x99\xef\x55\x6a\x89\x05\x48\x54\x2c\xce\x63\xa4\x34\x15\x5e\x58\xc5\xf3\xbd\x22\xc8\x51\xc5\x6a\xc9\x68\x56\x2a\x52\x52\x16\x87\x9f\x90\x65\x0e\x99\xd5\x5b\x14\x20\x0a\x4b\x6c\x5d\x03\x68\x11\x55\x20\xcd\xcf\x1f\x28\xeb\xe5\xf3\x57\xea\xda\xc4\x5a\x73\x2c\x2c\xa0\x84\xc4\xa0\x8a\x57\x60\x18\x23\xc5\x02\x82\x33\x2f\x90\x68\xa3\xa5\x54\xb1\xda\x6a\xdc\xd5\x85\x2b\x4f\xa9\x68\x4b\xc7\xd6\x7a\xe1\xb5\xc1\x32\xe8\xab\x14\xe4\x5f\x93\x90\x13\x8b\x75\xb0\xc6\xbf\x1d\x48\x05\xc5\x3d\xf1\x3a\x57\x77\x27\x56\xf7\xed\x89\x1b\xb4\xe8\xd4\x1a\x59\xaa\x40\x7d\x5f\x7c\xdd\x5f\xea\x30\xd3\xf2\xdf\x00\x35\xdf\xeb\xe9\xff\xfa\x08\xaf\x49\x26\xbf\xff\x84\xda\x39\x4c\xed\x16\x5d\xf9\x04\x82\x0d\xc0\x51\x8c\x97\x67\x6c\xf3\xcc\xcb\x09\xf2\x28\x86\x69\x65\x74\x00\x4c\x2b\xf5\xbe\x65\x35\x02\xa9\x82\x81\xf4\xce\x21\x49\xc7\x04\x0b\x0f\x18\x5e\x93\xc4\xd8\x74\xf3\xcf\xe7\x49\x28\x4d\x78\xbb\x67\x20\x12\xba\x75\xf9\x50\xb2\xe4\xc0\xd2\xee\x8f\x3b\xc8\x71\x75\xf6\x5e\xe3\x11\x87\xb9\xdd\xe2\x85\xf3\x87\x8e\xe7\x1f\x8c\x54\x02\x06\x28\xc5\x01\x66\xea\x16\x81\x08\x77\xb3\x6a\xb0\xbe\x56\x89\x51\x66\x97\xe3\xd7\xb7\x48\xb7\xf0\xe8\xf0\x4a\x2e\xdb\x9f\xc9\x9a\xee\xb4\xf9\x55\x1e\x13\xe5\x2e\x8b\x28\xa3\xc1\xb4\x31\xca\x07\x67\x12\x34\x39\xea\xfd\xec\x15\x78\x6a\xb3\x56\x5f\xf7\xbd\x98\xdc\x35\x75\x21\xcb\xee\x11\xb9\x8b\xf7\x00\x00\x00\xff\xff\xfa\x8e\x95\xba\x64\x0d\x00\x00")

func compiledPrototypeAbiBytes() ([]byte, error) {
	return bindataRead(
		_compiledPrototypeAbi,
		"compiled/Prototype.abi",
	)
}

func compiledPrototypeAbi() (*asset, error) {
	bytes, err := compiledPrototypeAbiBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "compiled/Prototype.abi", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _compiledPrototypeBinRuntime = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x5a\x09\x92\xe2\xba\x12\xbc\x52\xed\x2a\x1d\x47\xeb\xfd\x8f\xf0\x43\xb6\xbb\x81\xf1\xb4\xb1\xcd\x83\x4f\xf4\x00\x31\xc1\x50\x6d\x59\x2a\x65\x66\x2d\x32\x06\x0e\x06\x02\x4a\x06\x20\x6c\x08\x86\x00\x1d\x35\x18\x00\xb0\x86\x02\x08\x27\x5f\x11\x40\x8c\xfb\xf2\x42\x73\x30\x26\xb0\xd4\x2c\x22\xca\x34\x8f\x69\x98\xac\xa1\xa6\x26\xcd\x27\x2b\x06\x5c\xac\x25\x59\xe5\x16\x66\x6b\x6d\xb3\x95\x6b\x89\xa8\x21\x4d\x56\xa2\xe5\x5a\x41\x24\x4a\xb9\xcc\xd6\xd0\x67\xab\xb6\x1c\x93\x64\x9b\xad\x3d\xcd\x56\x4b\xcd\x95\xac\x4e\x56\xfe\x9a\xcd\x7a\x84\x66\x9e\x67\x6b\x97\xd9\x9a\x94\x3c\xf4\xdc\x26\xab\xa8\x2e\xd6\x80\xa1\x65\x59\xac\xd5\x17\x6b\x49\x85\x1b\xf2\x64\x55\xce\xb3\x35\x4b\x2f\x41\x65\xbe\xaf\xc6\xb2\x58\x2d\x44\x76\x98\xf7\x41\xfb\xb2\xde\xa2\x35\x8b\x0b\x4d\x56\xd3\x65\x77\x8a\x61\x6a\x18\x66\xdf\x2c\xc7\xc5\x9a\x1c\xa1\xc0\xbc\x3b\xd6\x97\xfb\xd6\x1e\x2d\x05\x99\xaf\x0d\x3a\xde\x79\x20\xe9\xd0\xab\x66\x16\x07\xd4\xb1\x9b\x40\x33\xc2\xb3\x5d\x07\xea\x33\xe6\xe2\xc0\x06\xec\x08\x18\xc1\xc1\x07\x07\xbe\x31\xbc\xf7\x42\x8b\x60\x40\x30\xc6\x46\x8a\xd3\x1d\x1e\x1b\xaf\xd3\x7b\xf8\x92\x93\xda\xf0\x45\x40\xd1\xc1\x09\x75\x7e\x3b\x0e\xee\x4e\x63\x70\xba\x76\xb9\x22\x22\x70\x84\xce\xd7\x5e\x87\xba\xf6\xba\xc0\x73\xbc\x1e\xf3\x60\xdc\xf0\xc8\x4b\xbb\xf5\xe8\x6b\xc4\xd7\xe7\x11\xcf\x5a\x5a\x79\x46\xd8\xff\x7b\xcf\xbe\x57\x1f\xf3\xb4\x7a\x80\xab\x55\x10\xad\xf7\x97\x8c\x9e\xb8\x8a\xcc\xfd\x66\x0f\xf9\xb2\x67\x4e\x57\xfb\x47\xcb\x88\x9f\x77\x90\x3c\xaf\xd7\xde\x9e\xc4\x8d\xff\xc4\xf7\x42\x8f\x2b\x82\xc1\x56\x5e\xf3\x14\x31\xde\xd5\xeb\xca\x7f\xa8\xe6\x88\xb7\x7f\xd1\x3f\xe7\x67\xf2\xb3\x29\xdd\xae\xf6\xc8\x5d\x8f\x5c\x7b\x60\x17\x04\x60\xb5\x0b\xc2\x4f\x88\x15\x63\xfc\x8f\x3b\xd3\x19\x4f\xe3\x28\x86\x6b\x0f\xa2\x3d\x0f\xc7\x91\x2e\xdf\x0f\xc7\x26\xab\x5d\x50\x8e\xef\xab\x5d\x1c\x15\xd4\x9f\x39\x43\x25\xac\xbd\xf0\x27\x60\xb9\xc5\x46\x24\xef\xa7\xd9\xa8\xc9\xd7\x1e\xf4\xfa\xc6\x38\xb0\xf3\x0a\x07\x83\x75\xfe\x33\x95\xd7\xe0\xb0\x89\x8d\x84\xb0\x5e\xad\xad\xeb\x57\xcb\x6f\x5c\xbf\xa2\x8a\xaf\xbd\x28\xba\xf6\xa2\xa7\x27\xc6\x31\xab\x6b\xe4\x03\xac\xf9\x1b\xf8\x09\xfc\xfd\x5e\x85\xab\x3c\x5c\xb9\x04\xe3\xf5\xaa\xb3\xbf\x31\x03\x22\xd3\xd7\xde\x4f\xbd\x35\x1c\xb9\xeb\xe8\x86\x05\x6b\x8b\xe4\xe2\xb2\xec\x0b\x5f\x77\xd7\x8f\x74\xea\xb0\xc4\x3b\x10\x98\xaa\xe8\xe7\x67\xb7\x97\x64\xd0\xef\xaa\x9f\xe0\xd2\x21\x0c\x66\x4c\xbc\x09\x0e\x9c\x51\x17\x3e\xf9\x9f\xf5\xbf\xa6\x8e\x97\xbf\xc6\xae\xb3\x26\x06\x1f\xda\xfc\xbf\xe5\xba\xab\xce\x62\xd8\x09\x1c\x71\x19\x95\x6f\xf4\x7d\x61\xa4\xe2\xdf\x59\x32\x3e\xc7\xf7\xe9\x9b\x9d\xe3\x89\x78\xcd\xa1\xd3\xaf\xe1\xc9\x46\x57\x7c\x04\xdf\x18\xb6\xf0\x8d\x7e\x06\xdf\x98\x1e\xc4\xf7\x28\xb6\xd9\xa8\x68\xa4\xe8\xc4\xfc\x1b\xb0\x7d\xb3\x18\x90\xbc\x6e\x70\x24\x25\x3c\xc1\x91\x94\xc3\x31\x8e\x8c\x3c\x38\x9d\x6c\x94\x31\x6e\xdc\x31\x74\x69\x02\x58\x72\x3b\x0b\xed\x0d\xb2\x70\x39\x1f\x01\x76\x1a\x7f\xb9\x41\x05\x42\x37\x0a\x6a\xd1\x4a\x10\x8b\xd6\x38\x11\x58\xb3\x1e\x84\x20\x70\x00\xeb\xd6\x02\x5b\x0f\x64\x6a\xf2\xd3\x7c\x0a\x1b\x99\x7c\xde\x35\xfb\x3a\x9b\x3c\xaa\x03\x60\x6f\x0d\x99\xbf\x23\x1c\x3d\x49\x05\x2f\xed\xf3\x7c\x9b\x9d\xb9\x96\x0d\x76\xe6\x0e\x7b\xd9\x29\x17\x76\x96\xdb\xf3\x9f\x2d\x76\x6e\x44\x35\xbc\xf9\x77\x32\x6f\x65\xc9\x2d\xba\xf4\xdf\x92\xb7\xde\x2c\xb6\x95\xbe\x95\xff\x2a\x9c\xc9\x7f\x95\xfe\x0f\xf5\x8d\xf5\x08\xb1\xd4\xf0\xe1\xc9\xde\x39\x0e\xf1\xa4\x0d\x26\xfc\xc8\x93\x46\x7c\x82\x27\x8d\xe3\xeb\x79\x42\x85\x2a\x48\x15\xe7\xdf\x93\x23\xf6\xe0\xd7\xb6\xf0\xeb\x70\x06\xbf\x8e\x67\xf0\x9b\xbf\x9d\x44\x0f\xb1\xf5\x4a\x6c\xbf\x45\xe5\xd7\x6b\xbf\x79\x26\x7e\x4e\xa5\xbd\xd1\x16\xca\xdd\x8e\xa3\x8c\x00\xe5\xf5\x2a\xed\x15\xa2\x6b\x8f\xff\x96\x4a\x11\xca\x06\x7e\x08\xf5\x14\x7e\xed\x0c\x7e\x17\x95\xe2\x98\xd8\xc9\x10\xb3\x94\x33\xdd\x69\x4c\xd9\x52\x6e\xe6\xec\x9f\xee\x74\xd7\x1c\x47\x34\x8f\xb8\x55\xff\x23\xee\xaf\xff\xaf\x38\x43\xfb\xeb\xff\xeb\xee\x14\x97\xa7\xe5\x2f\xea\x4e\x79\x6f\x77\x6a\x48\x10\x34\xb0\x69\xa0\xed\xf9\x76\x74\xa7\xa7\x63\x9a\x5b\x4e\xd2\x29\x7d\x72\xd7\x5f\x79\xcc\x02\x1b\x3c\x66\x95\x13\x3c\x66\x4b\x0f\xe6\x2e\x44\xf6\xf2\x48\xf4\x0b\x6a\xd9\x9b\xd1\x27\xfa\xed\x9d\xe3\xc2\x1a\xb8\xcf\x1a\xd1\x8d\xfe\x15\xc5\xee\xf4\xaf\x57\x38\xcb\x98\xe5\x3c\xce\x1d\x8b\xf7\x92\xa7\xf3\xf5\x6f\x7d\xcb\x93\x90\x96\x17\x20\xfd\xd3\x6f\xa6\xf8\xa2\xb8\x1d\xf8\x28\x6d\xe1\xa3\xbc\x07\x9f\x2f\x84\x74\xaa\x03\x4f\x23\x24\x5d\x73\xe7\xaa\x1f\x25\xee\x9d\xe3\x50\xfc\x36\xda\x8a\xdf\xc6\x67\xe2\xb7\xc9\xc1\xf8\xbd\xd4\x21\x56\xfa\x3b\x9e\x92\x4f\x75\xc8\xcd\x49\xf9\x4f\xf3\xed\xad\x43\x8e\x6a\x40\x63\x51\x8e\x94\x3f\x4f\x8a\xf6\xce\x71\x48\x03\x21\x6d\xf5\x6f\x21\x9f\xe9\xdf\x42\x39\xd8\xbf\x2d\x1a\x70\xc5\x17\x6a\x20\xdd\xd5\x00\x5a\x99\x9e\x0c\xa1\x49\x88\xf7\x9e\x18\x1d\x7b\x52\x74\x50\x05\x14\x47\x29\x5e\xfe\xb1\xb3\x05\xef\x5b\xf1\x39\xc2\x99\xf8\x1c\xf1\x4c\x7d\x7d\x73\x02\xe8\x78\xc4\x73\x94\xf9\x17\x41\x63\xee\xf2\x4a\x7e\xeb\x5d\x7e\x47\x6b\xc1\x06\xcb\x2d\x9a\xdc\xeb\x37\xf7\xf0\x7b\xf2\x31\x3d\x52\xf1\xa4\xda\x35\x71\xf1\x4f\xc5\xb3\x77\x8e\x43\xd1\x3e\xc5\xb8\xa1\xa8\x94\xea\x09\x45\xa5\xc2\xa7\xa2\x7d\x16\x7f\xab\x8a\xe7\x8f\x68\x3f\x3e\x4d\x1e\xfc\x5d\xc0\x5c\xf1\x1c\x62\xda\xd1\xe8\xe2\x60\x88\xc5\x4d\x83\xc2\xb1\x99\x3e\x27\xdc\xbb\x34\x53\x98\x37\x34\x53\x24\x9c\xd0\x4c\xd1\x7a\x4c\x33\xc7\x38\xa1\x79\xd1\x58\xe9\xe9\x75\x1a\x23\xb8\xa7\xb1\x91\x5f\xac\x98\x11\x8c\x0a\x8a\xc0\xaa\x61\xe0\x20\x23\xeb\x10\x0c\xf5\x05\x1c\x63\xe6\xea\x6a\x6f\x45\x05\x90\xd0\xd4\x28\xa4\x90\x02\x31\xa8\x13\x24\x05\x65\xc1\x52\xc5\x9a\x43\x86\x4c\xdd\x4b\xd3\xa6\xbd\xaa\x26\x45\x82\x44\x50\xa4\x7a\xcd\x31\xd5\x1a\x7a\xa2\x48\x2a\x50\xa3\x19\x76\x2e\x00\x14\xff\x17\x00\x00\xff\xff\xb3\xbc\x88\x46\x52\x3a\x00\x00")

func compiledPrototypeBinRuntimeBytes() ([]byte, error) {
	return bindataRead(
		_compiledPrototypeBinRuntime,
		"compiled/Prototype.bin-runtime",
	)
}

func compiledPrototypeBinRuntime() (*asset, error) {
	bytes, err := compiledPrototypeBinRuntimeBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "compiled/Prototype.bin-runtime", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _compiledPrototypeeventAbi = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x90\x3f\x6b\x84\x40\x10\xc5\xbf\xcb\x90\xd2\xca\x90\x14\xb6\xa9\x03\x21\x21\x95\x58\xcc\xb9\x73\xb0\xa0\xb3\xb2\x33\xeb\xdd\x22\x7e\xf7\xe3\xe4\xf0\x1f\xda\x78\xd7\xee\xce\xfb\xbd\x1f\x2f\xef\x00\xd9\x71\xac\x5d\x10\xc8\xce\x58\x09\x25\x60\xb9\x09\x2a\x90\xe5\x1d\x58\x36\x74\x25\x33\x7e\x31\xd6\x04\x19\x30\x5d\xbe\x51\x94\x3c\x24\xa0\xb1\xb9\x3f\xa1\x31\x9e\x44\xa0\x2f\xc6\xab\xb7\xf5\x0d\xb5\xc4\x0a\x7d\x72\xac\xb4\xf4\x64\xac\x4e\xb4\x60\x59\xd3\x8f\xcf\x81\xb7\x13\xf1\x54\xba\x96\x7c\xfc\x45\xa5\x8d\xe0\x4c\xf5\x6b\x80\xff\x54\xc8\xc7\x75\xd5\x87\xa9\x3a\xc8\xe6\x3a\xfb\xae\x58\xaa\x75\xb3\xf6\x53\x54\x92\xf7\x74\x61\xf9\x2f\xcf\xcc\xb9\xf0\x93\xc6\xb1\xb8\xd7\x2b\xfe\xad\xb9\x0f\xcb\xe2\x16\x00\x00\xff\xff\xa4\xcf\xdd\xbb\x6b\x02\x00\x00")

func compiledPrototypeeventAbiBytes() ([]byte, error) {
	return bindataRead(
		_compiledPrototypeeventAbi,
		"compiled/PrototypeEvent.abi",
	)
}

func compiledPrototypeeventAbi() (*asset, error) {
	bytes, err := compiledPrototypeeventAbiBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "compiled/PrototypeEvent.abi", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _compiledPrototypeeventBinRuntime = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x04\xc0\x01\x01\x00\x21\x08\x03\xc0\x4a\xfb\x21\x0c\xe3\xa0\x48\xff\x08\x7f\x81\x44\x60\xc1\x19\x00\x12\xd3\x40\x7d\xe1\x41\x95\x4a\x34\x78\x12\x39\x96\x92\xef\xf6\x61\x8f\xe9\x30\x5e\x4c\x1d\xbe\xfd\xdc\xb5\x63\xd6\xf9\xcc\x4c\x5c\x3b\x35\x35\x8b\x5e\xf7\xaa\xd3\xe3\x35\x2f\xc0\xfd\x07\x00\x00\xff\xff\xf1\x21\x5a\x3f\x6a\x00\x00\x00")

func compiledPrototypeeventBinRuntimeBytes() ([]byte, error) {
	return bindataRead(
		_compiledPrototypeeventBinRuntime,
		"compiled/PrototypeEvent.bin-runtime",
	)
}

func compiledPrototypeeventBinRuntime() (*asset, error) {
	bytes, err := compiledPrototypeeventBinRuntimeBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "compiled/PrototypeEvent.bin-runtime", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _compiledPrototypenativeAbi = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xd4\x97\x41\xab\xdb\x30\x0c\xc7\xbf\x8b\xce\x39\xbd\xb1\x1d\x72\xdb\x0a\xbb\xbd\x31\x36\x76\x7a\x3c\x86\xe2\xa8\x6f\xa6\x8e\x1c\x2c\x39\x25\x94\x7e\xf7\xd1\xb2\x36\xdd\x9a\x52\x37\xb4\x38\x3b\x96\x4a\x8a\x7e\xfe\x2b\x7f\x39\x2f\x1b\x30\x9e\x45\x91\x15\x4a\x0d\x91\x0a\xb0\xdc\x46\x15\x28\x5f\x36\xc0\xd8\x10\x94\x20\xe4\x96\x50\x80\xf6\xed\xee\x17\xd6\x75\x20\x11\xd8\xbe\x16\x87\x00\x46\xb5\x1d\xfd\xfc\x85\xb2\xf0\x35\x41\x01\x3e\xea\xbf\x45\x86\x02\x95\xf7\x6e\x9f\xdd\x62\x8f\x95\x23\x28\x97\xe8\x84\x0a\x10\x45\xa5\xe7\xa8\x58\x59\x67\xb5\x87\x12\x3a\x4b\xeb\x21\x71\x19\xd9\xa8\xf5\x0c\xdb\xe2\x9e\x6d\x9b\x40\xb5\xd5\xaf\x0e\xf9\x5a\xe7\xd1\xb2\x3e\xbd\xff\xb0\x7f\xfe\xe5\x3f\xb3\x91\x0d\x5d\x55\xce\x9b\xd5\x97\xd8\x54\x14\xfe\x6e\xf0\xdd\xd3\xc8\x01\x10\x53\x78\xeb\x3f\xea\xa7\x5d\x56\xf2\x19\xcc\x48\xc0\x18\x02\xb1\x7e\x6f\x3d\x8b\x0f\xd7\x00\x4e\xeb\xe4\xd6\x49\x8e\x2d\x5f\x85\xb4\x92\xc8\x97\xf9\xf5\x1a\xe0\x56\xd4\x9f\x74\xd5\x2b\xc9\xe8\xf4\x89\xfa\x80\x6f\xf4\x39\x81\xec\xa4\xc6\x9d\xe0\xfe\x64\x3f\x56\x3a\x21\x47\x26\x75\x3c\x6f\x90\x8f\x3d\x1f\x82\xe6\xc1\x99\x93\x70\xf2\x98\x46\xa1\x24\xba\x5d\xdc\x62\xbf\x2a\x32\x58\xe4\x74\xfd\x98\xd6\xcf\x28\x9a\xc6\x28\xa4\xc7\xe0\x01\x71\x36\x52\xdd\xb6\xd6\x2a\x74\xc8\x86\xf2\xed\xb5\xe9\xa2\xa5\xce\x64\xa0\xc6\x77\xf4\x43\xe8\xbf\xb3\x95\x54\x42\xac\xeb\x7c\x78\x0f\xf7\x14\x2b\x77\x86\x9b\xcf\xd2\x8b\x9c\x75\x1d\x4c\x67\x34\x07\x8f\xbf\x7c\xe9\x0f\x64\x7c\x47\xa1\xff\x86\x4a\xe3\x0e\x72\x66\xab\x8b\xf1\x8f\x8c\xcc\x13\x7b\xd6\x69\x73\xee\xfe\x0f\xbb\x42\xbf\xfe\x0e\x00\x00\xff\xff\xf2\xec\x7d\x22\x7d\x0e\x00\x00")

func compiledPrototypenativeAbiBytes() ([]byte, error) {
	return bindataRead(
		_compiledPrototypenativeAbi,
		"compiled/PrototypeNative.abi",
	)
}

func compiledPrototypenativeAbi() (*asset, error) {
	bytes, err := compiledPrototypenativeAbiBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "compiled/PrototypeNative.abi", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _compiledPrototypenativeBinRuntime = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func compiledPrototypenativeBinRuntimeBytes() ([]byte, error) {
	return bindataRead(
		_compiledPrototypenativeBinRuntime,
		"compiled/PrototypeNative.bin-runtime",
	)
}

func compiledPrototypenativeBinRuntime() (*asset, error) {
	bytes, err := compiledPrototypenativeBinRuntimeBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "compiled/PrototypeNative.bin-runtime", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _compiledTokenAbi = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x54\x31\x4f\xf3\x40\x0c\xfd\x2f\x9e\x33\x7d\xd2\xc7\x90\x8d\x85\x0d\x31\xc0\x56\x55\xc8\x49\x1c\x74\xd2\xc5\x3e\xdd\xf9\x52\xa2\x8a\xff\x8e\x5a\x92\x46\x82\xbb\x50\x02\x45\x8c\x91\x9f\xed\xf7\x5e\xde\x79\xb3\x87\x5a\x38\x28\xb2\x42\xa9\x3e\x52\x01\x86\x5d\xd4\x00\xe5\x66\x0f\x8c\x1d\x41\x09\x8f\xb2\x63\xf2\x50\x80\x0e\xee\xf0\x8d\x4d\xe3\x29\x04\x78\x29\x66\x48\x70\xc4\x4d\x12\xb4\x2d\x26\x10\x5a\x2b\x3b\xe4\x9a\xa0\x00\x89\xfa\x7e\x8d\xa7\x0e\x0d\x1b\x7e\x9a\x87\x44\xc3\xfa\xef\xff\xd5\x71\x88\xc3\x01\x2b\x4b\x50\xb6\x68\x03\x15\x10\x14\x95\x6e\xa3\x62\x65\xac\xd1\x01\x4a\xe8\x0d\xed\xe6\xde\x36\x72\xad\x46\xf8\x48\xf3\x1b\x22\x67\xfe\x15\xda\x03\xfb\xbb\x36\xcd\x7f\x2c\xff\x26\xfb\x99\x9b\x8a\xa2\xbd\x8f\xce\xd9\x21\xcd\x2e\x4c\xb5\xcb\x91\x1b\xbb\x13\xde\xb6\x5e\xba\xe5\xfc\xa8\x2c\xd7\x7b\xb4\x31\x63\xed\xe4\x80\x47\x0e\x2d\xf9\x9b\xb7\x5d\x49\x0b\xea\xfa\x30\xf7\x34\xa5\x12\xb1\x67\x1a\xc0\xc2\x13\x68\xbd\x0d\x3f\x27\xf2\x8f\x0a\xcc\x5f\x81\x2f\xa9\x44\xe7\xbc\xf4\x99\x33\x71\x51\x91\xc8\xc2\x43\x27\x31\xa4\x54\x1a\x6e\xe8\x99\x9a\xe9\x15\x7e\x1e\xee\x4c\x43\x2e\x06\x27\xf8\xb8\xfa\x7c\xc3\x1e\xe6\x58\x8c\x20\xea\x89\x75\xb5\xa4\x85\x83\x9f\xe9\x58\xfc\xf3\xeb\x85\x5d\x1f\x93\x80\xf6\x83\xb0\xed\x6b\x00\x00\x00\xff\xff\xba\x7d\x61\x8e\xba\x06\x00\x00")

func compiledTokenAbiBytes() ([]byte, error) {
	return bindataRead(
		_compiledTokenAbi,
		"compiled/Token.abi",
	)
}

func compiledTokenAbi() (*asset, error) {
	bytes, err := compiledTokenAbiBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "compiled/Token.abi", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _compiledTokenBinRuntime = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func compiledTokenBinRuntimeBytes() ([]byte, error) {
	return bindataRead(
		_compiledTokenBinRuntime,
		"compiled/Token.bin-runtime",
	)
}

func compiledTokenBinRuntime() (*asset, error) {
	bytes, err := compiledTokenBinRuntimeBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "compiled/Token.bin-runtime", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"compiled/Authority.abi":               compiledAuthorityAbi,
	"compiled/Authority.bin-runtime":       compiledAuthorityBinRuntime,
	"compiled/AuthorityNative.abi":         compiledAuthoritynativeAbi,
	"compiled/AuthorityNative.bin-runtime": compiledAuthoritynativeBinRuntime,
	"compiled/Executor.abi":                compiledExecutorAbi,
	"compiled/Executor.bin-runtime":        compiledExecutorBinRuntime,
	"compiled/Extension.abi":               compiledExtensionAbi,
	"compiled/Extension.bin-runtime":       compiledExtensionBinRuntime,
	"compiled/ExtensionNative.abi":         compiledExtensionnativeAbi,
	"compiled/ExtensionNative.bin-runtime": compiledExtensionnativeBinRuntime,
	"compiled/Measure.abi":                 compiledMeasureAbi,
	"compiled/Measure.bin-runtime":         compiledMeasureBinRuntime,
	"compiled/Params.abi":                  compiledParamsAbi,
	"compiled/Params.bin-runtime":          compiledParamsBinRuntime,
	"compiled/ParamsNative.abi":            compiledParamsnativeAbi,
	"compiled/ParamsNative.bin-runtime":    compiledParamsnativeBinRuntime,
	"compiled/Prototype.abi":               compiledPrototypeAbi,
	"compiled/Prototype.bin-runtime":       compiledPrototypeBinRuntime,
	"compiled/PrototypeEvent.abi":          compiledPrototypeeventAbi,
	"compiled/PrototypeEvent.bin-runtime":  compiledPrototypeeventBinRuntime,
	"compiled/PrototypeNative.abi":         compiledPrototypenativeAbi,
	"compiled/PrototypeNative.bin-runtime": compiledPrototypenativeBinRuntime,
	"compiled/Token.abi":                   compiledTokenAbi,
	"compiled/Token.bin-runtime":           compiledTokenBinRuntime,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"compiled": &bintree{nil, map[string]*bintree{
		"Authority.abi":               &bintree{compiledAuthorityAbi, map[string]*bintree{}},
		"Authority.bin-runtime":       &bintree{compiledAuthorityBinRuntime, map[string]*bintree{}},
		"AuthorityNative.abi":         &bintree{compiledAuthoritynativeAbi, map[string]*bintree{}},
		"AuthorityNative.bin-runtime": &bintree{compiledAuthoritynativeBinRuntime, map[string]*bintree{}},
		"Executor.abi":                &bintree{compiledExecutorAbi, map[string]*bintree{}},
		"Executor.bin-runtime":        &bintree{compiledExecutorBinRuntime, map[string]*bintree{}},
		"Extension.abi":               &bintree{compiledExtensionAbi, map[string]*bintree{}},
		"Extension.bin-runtime":       &bintree{compiledExtensionBinRuntime, map[string]*bintree{}},
		"ExtensionNative.abi":         &bintree{compiledExtensionnativeAbi, map[string]*bintree{}},
		"ExtensionNative.bin-runtime": &bintree{compiledExtensionnativeBinRuntime, map[string]*bintree{}},
		"Measure.abi":                 &bintree{compiledMeasureAbi, map[string]*bintree{}},
		"Measure.bin-runtime":         &bintree{compiledMeasureBinRuntime, map[string]*bintree{}},
		"Params.abi":                  &bintree{compiledParamsAbi, map[string]*bintree{}},
		"Params.bin-runtime":          &bintree{compiledParamsBinRuntime, map[string]*bintree{}},
		"ParamsNative.abi":            &bintree{compiledParamsnativeAbi, map[string]*bintree{}},
		"ParamsNative.bin-runtime":    &bintree{compiledParamsnativeBinRuntime, map[string]*bintree{}},
		"Prototype.abi":               &bintree{compiledPrototypeAbi, map[string]*bintree{}},
		"Prototype.bin-runtime":       &bintree{compiledPrototypeBinRuntime, map[string]*bintree{}},
		"PrototypeEvent.abi":          &bintree{compiledPrototypeeventAbi, map[string]*bintree{}},
		"PrototypeEvent.bin-runtime":  &bintree{compiledPrototypeeventBinRuntime, map[string]*bintree{}},
		"PrototypeNative.abi":         &bintree{compiledPrototypenativeAbi, map[string]*bintree{}},
		"PrototypeNative.bin-runtime": &bintree{compiledPrototypenativeBinRuntime, map[string]*bintree{}},
		"Token.abi":                   &bintree{compiledTokenAbi, map[string]*bintree{}},
		"Token.bin-runtime":           &bintree{compiledTokenBinRuntime, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
