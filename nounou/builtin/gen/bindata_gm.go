// Code generated by go-bindata. DO NOT EDIT.
// sources:
// compiled/Authority.abi (1.339kB)
// compiled/Authority.bin-runtime (7.224kB)
// compiled/AuthorityNative.abi (1.419kB)
// compiled/AuthorityNative.bin-runtime (0)
// compiled/Energy.abi (2.559kB)
// compiled/Energy.bin-runtime (7.808kB)
// compiled/EnergyNative.abi (1.101kB)
// compiled/EnergyNative.bin-runtime (0)
// compiled/Executor.abi (2.739kB)
// compiled/Executor.bin-runtime (18.514kB)
// compiled/Extension.abi (1.654kB)
// compiled/Extension.bin-runtime (5.69kB)
// compiled/ExtensionNative.abi (1.718kB)
// compiled/ExtensionNative.bin-runtime (0)
// compiled/Measure.abi (235B)
// compiled/Measure.bin-runtime (576B)
// compiled/Params.abi (669B)
// compiled/Params.bin-runtime (2.178kB)
// compiled/ParamsNative.abi (531B)
// compiled/ParamsNative.bin-runtime (0)
// compiled/Prototype.abi (3.428kB)
// compiled/Prototype.bin-runtime (14.932kB)
// compiled/PrototypeEvent.abi (619B)
// compiled/PrototypeEvent.bin-runtime (106B)
// compiled/PrototypeNative.abi (3.709kB)
// compiled/PrototypeNative.bin-runtime (0)

//+build gm

package gen

import (
	"bytes"
	"compress/gzip"
	"crypto/sha256"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes  []byte
	info   os.FileInfo
	digest [sha256.Size]byte
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _compiledAuthorityAbi = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x94\xc1\x6e\xc2\x40\x0c\x44\xff\xc5\xe7\x3d\xb5\xb7\x5c\x7b\xe6\x0b\x10\xaa\x4c\x76\xa8\x56\x0d\x36\x5a\x7b\x53\x22\xc4\xbf\x57\x48\x84\xa4\x08\x02\xa8\x42\xed\x35\x9a\x71\x9e\x27\xe3\xcc\x77\x54\xab\x98\xb3\x38\x55\x9e\x0b\x02\x25\xd9\x14\x37\xaa\xe6\x3b\x12\x5e\x83\x2a\x7a\x17\x8d\x98\xb1\x39\x32\x05\xf2\x6e\x73\x78\xc8\x31\x66\x98\xd1\x7e\x11\x7a\x9d\x60\xeb\x14\x48\x8b\x9f\x4f\xb8\x6c\xdb\x70\xc7\xcb\x06\x54\xad\xb8\x31\x04\x32\x67\xc7\xac\x38\x2f\x53\x93\xbc\xa3\x8a\xda\x84\xaf\xc1\xbb\x2a\x52\x7b\x52\xa1\x7d\x98\xc0\x1e\x78\xb0\x45\x5d\x5c\xf3\x1f\x30\x1d\xdd\x8f\x66\x19\x06\x1d\x24\x6a\x36\xbd\xa1\x4a\x11\xe2\x07\xae\x93\x6a\xd9\x39\xec\xf5\x65\xfc\x5d\x38\xc6\x1f\x11\xdc\xb5\xa6\xa8\xf4\xa2\x27\x2d\x3b\x00\x66\xb4\xfa\x89\xa7\x32\x5e\x2d\xc9\x2a\x65\xfb\x07\xad\x7d\x38\xb3\x0f\x5c\xa1\x6e\x92\x39\xe2\xa8\x10\xaa\xcd\xb8\x33\x77\x15\x6b\xa2\x57\x83\x88\x6b\x4f\x2d\xce\xdf\xf4\xdb\x88\x58\x54\xba\xb5\x16\xbb\x54\xac\x24\x11\x5b\xc4\x3e\xbe\xfe\xc7\x73\xe3\xa6\x4e\xae\xe3\xc0\x11\xbf\xca\xe4\xe9\xbc\xb1\xc4\x14\xd9\x47\x5b\xa2\x85\x38\xed\x17\xdf\x01\x00\x00\xff\xff\x9f\x87\xfc\x7c\x3b\x05\x00\x00")

func compiledAuthorityAbiBytes() ([]byte, error) {
	return bindataRead(
		_compiledAuthorityAbi,
		"compiled/Authority.abi",
	)
}

func compiledAuthorityAbi() (*asset, error) {
	bytes, err := compiledAuthorityAbiBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "compiled/Authority.abi", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xdf, 0x28, 0x8, 0x83, 0xe, 0x84, 0xd, 0x49, 0x1d, 0x85, 0x58, 0xa7, 0x81, 0x3, 0x6c, 0x65, 0x4b, 0x77, 0xbf, 0xd0, 0x4f, 0xc, 0xf4, 0xf5, 0xdb, 0xf8, 0xdb, 0xaa, 0xf0, 0xc5, 0x7a, 0xcd}}
	return a, nil
}

var _compiledAuthorityBinRuntime = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xe4\x58\x09\x72\xa3\xcc\x0e\xbe\x92\x76\xb5\x8e\xd3\xeb\xfd\x8f\xf0\xaa\x81\xd8\x24\xce\xd8\x86\x89\xfd\x52\xff\x40\x0d\x78\x04\xb4\xa4\x4f\xcb\xa7\xb4\x41\x02\x03\x01\x25\x03\x10\x36\x04\x43\x00\x4f\xea\x06\x00\xac\x5e\x01\xe1\xe4\x11\x00\x62\x3c\xb6\x03\x2d\x81\xb1\x37\x23\x56\x37\x94\x45\x4f\x53\x9f\xd2\x22\x66\x90\xc8\x17\x29\x02\x6c\x52\x33\xf4\xea\xb2\x4a\xd5\x57\x69\xed\x83\x86\x20\xaf\xd2\x9a\x56\x69\xeb\x35\x30\x7a\x5a\xa4\x04\x65\x95\x76\x2b\x43\x47\xd0\x2a\x35\x52\xd7\x32\xfd\x4a\x30\x9a\x16\x96\x04\xa8\xd3\x8e\x14\xab\xbf\xab\x5c\x17\x0c\x4a\x9f\x88\x24\x60\x03\x4e\x08\x18\x90\x20\x4d\x44\x2e\x1e\x3d\x3a\xd0\x02\x0c\x08\xe6\xb7\x41\x81\x01\xba\x9c\x86\xc0\x90\xd5\xa6\x2d\x02\x8a\x69\xba\x7e\x60\xd5\x23\xef\x26\x9c\x91\x5d\x6c\xc0\x45\xf7\xa6\x31\x10\x38\x60\xf0\x0e\x05\x84\x7a\x83\x02\x2e\x4f\xb8\xc7\xef\xb3\xd6\xf8\xd6\xda\x6a\x3f\x1f\xb3\x9f\xf8\x7e\xda\x89\x71\x27\x1f\x24\x8d\x89\x30\xc0\xde\xc3\x26\x37\x1e\x12\xc4\x0b\xb3\x32\xb5\x74\x63\x05\xa1\xdf\x5a\x41\xf3\x5a\x05\x7f\x5d\x56\x90\xf5\x5b\x6b\x33\xbf\x10\xb3\xda\xfd\x13\x0a\x8a\xdb\x79\xb5\x3a\xc9\xeb\x91\x49\xfc\x91\x63\x1f\xf7\xdd\x33\xba\xb5\x29\x44\xe1\xe3\xbc\xc5\x73\xe9\xfd\x70\xc4\x12\xe3\xac\xde\x21\x4b\x99\x96\x2c\xeb\xd1\xbe\xf7\xff\x0d\x8f\x00\xad\x76\x83\xc0\x9b\xf3\x8c\x2e\xd8\x24\x9e\xb9\xb3\x64\x96\x27\xe0\x82\xba\x65\x1c\xe7\x2f\xf5\xa1\x79\xe0\xf5\x69\x29\xea\xdc\xd6\xe7\xdc\xd7\x5f\xdb\x7b\x3b\xec\xa7\x9c\x20\x21\x6e\x5f\x35\xdc\xaf\x79\xcd\x59\xc5\xef\xf3\x70\xde\xb7\xff\xd9\xb9\xe8\x05\x11\x65\x2d\xb8\xf9\x8b\xaf\x88\xdd\x53\x78\x8a\x8c\x3b\x78\xca\xec\xfa\x87\xf1\x14\x8f\x13\x78\x5e\xb0\x4c\x7c\x04\x4b\x94\xb5\xd6\x0c\x41\x71\xe9\x46\xd3\x22\x1f\xd5\x81\x6b\x41\x3a\x0b\xe4\xa7\x1a\x80\x8f\xca\x4e\x08\x9c\x68\x3e\xc1\xba\xab\x78\xf0\x61\xe4\x6a\x61\xd5\xc5\xc2\x3a\x67\x82\x79\x77\x33\xb4\x6a\x61\x42\x60\xdd\x86\x89\x29\x81\x35\x43\x67\x17\x53\xa7\xbd\x3e\x85\x3b\x7d\xb7\x6d\xe8\x1c\xaa\xc7\x3d\x3a\xb9\xbd\x11\x9d\x38\x8c\x8e\x5a\x37\xb1\xe1\xe4\x3c\xaf\xb7\xfa\x9e\x41\xc7\x00\x70\xd6\xc0\x47\x57\xde\xf9\x6f\xf4\xbb\xfd\x8f\x99\x1b\xd6\xe7\x1b\x2e\x1e\x27\xfc\x47\x30\xde\xcd\x8f\x47\xf2\x84\x4f\xd4\xdc\xd4\xd7\xfc\x8d\x98\xe6\x87\x98\xaa\x27\x53\x63\x57\x5f\x32\x89\xc0\xc9\xd4\x71\xbe\x37\x7f\x99\x1c\xc5\xf4\x68\x5f\xe7\x11\x31\x2a\xe4\x24\xf3\xdc\xd6\x93\x17\x31\xf3\x5b\xe6\x9c\x37\xe8\xa0\x3f\xcf\x52\xc1\x57\xa6\x79\x82\xcd\xbc\xd8\x1d\x36\xf3\x9a\x4f\xb0\x99\x77\x38\xc6\x66\x5b\x6d\x24\xd3\x37\xd6\x86\x3f\xac\x0d\xb4\xba\xd4\x00\x9a\x78\x6c\xb5\x12\x93\x85\x9c\xbf\xd7\xf7\xa8\x36\x0e\x4e\x86\x83\x07\x66\xb0\x6c\x82\x60\x29\x07\xf6\x06\x6a\x43\x83\x12\x63\x27\x69\xde\x3a\x0a\xa0\xd6\x2e\xc3\x22\x47\x43\x67\xb4\x46\x52\xbb\x97\x84\x7a\x89\xfe\xf4\x0f\x4d\x96\x7e\x29\xe7\xf1\xbc\xf8\x77\xe3\x5d\xa6\x2d\x23\x6c\xe9\xaa\xa9\xc3\x7b\xba\x6a\x9a\x7a\xa2\x57\x75\x3d\x3c\x51\x8a\x0e\x71\x17\x9b\xd5\xf4\x0f\xfd\x3d\x10\xf9\xde\xfc\x1a\xf5\xcc\xfc\x1a\xed\xe0\xfc\x8a\xaa\x65\xab\xfa\x9c\xec\x7d\x55\xcf\x0f\x19\xf1\x33\xff\x39\x7f\xc3\x91\x95\x60\xe5\x4a\xeb\xd7\xd5\x7c\x7c\x37\xab\x2e\x6f\xaa\xcf\x69\x65\x98\x7d\x99\xd9\xfe\xc0\xae\xf2\x83\xec\x8a\xe8\x98\x84\xf2\x3f\x96\xe3\x85\xf0\x4e\x8e\x17\xd6\x13\x39\x5e\xa4\x9c\x62\xb5\xd2\xe0\x8d\xac\xc6\x0f\x59\xad\xdb\x58\xf2\xb1\xae\x5c\x76\x9f\x11\x9e\x62\xb5\x43\x39\xf9\xb3\xac\xb6\xd4\xa8\xd9\xb0\x72\x8e\xd9\x9e\x60\xb5\x93\xfb\x15\x56\x5a\x6b\x32\xe4\xff\xbe\x5f\x51\xef\xee\xff\xd4\x53\xfb\x3f\xf5\xd4\xfe\xcf\x75\xbf\x02\x36\x7d\x07\x31\x05\xaf\xa3\xd5\xa4\xc9\xfe\x3b\xdd\x2c\x3d\x8e\x60\x4b\xe9\x4e\x04\x5b\xd4\x67\x23\x98\xae\x11\x6c\x85\x9e\x8d\xe0\xdf\xc8\xb6\xe8\xf3\x97\x7f\x78\xb9\x1a\x40\x46\x53\x23\xcf\x9e\x9d\x18\x34\x11\x90\x64\x00\x92\xd2\x0a\x48\x31\x1a\x5a\xb2\x24\x55\x61\x86\x3e\xa0\x40\x25\xb2\x28\x1c\xd0\x31\x4a\xc4\xe0\x68\x0d\x6b\x0f\x54\xe3\x1e\x93\x40\x29\xfe\x17\x00\x00\xff\xff\x1b\xd4\xa4\x1c\x38\x1c\x00\x00")

func compiledAuthorityBinRuntimeBytes() ([]byte, error) {
	return bindataRead(
		_compiledAuthorityBinRuntime,
		"compiled/Authority.bin-runtime",
	)
}

func compiledAuthorityBinRuntime() (*asset, error) {
	bytes, err := compiledAuthorityBinRuntimeBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "compiled/Authority.bin-runtime", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xa8, 0xab, 0x3e, 0xb2, 0x10, 0x56, 0x3a, 0xb9, 0x1f, 0x3a, 0xb4, 0x2d, 0xde, 0xd9, 0xe9, 0x7a, 0x40, 0xf3, 0x86, 0x41, 0x75, 0x91, 0x38, 0xf, 0xa4, 0xd8, 0xd3, 0x87, 0x84, 0x1c, 0xe3, 0x1d}}
	return a, nil
}

var _compiledAuthoritynativeAbi = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xc4\x93\x41\x4f\xc3\x30\x0c\x85\xff\x8b\xcf\x39\xc1\x2d\x77\x8e\xfb\x05\xd3\x84\xdc\xe6\x15\x45\x14\xa7\x8a\x9d\xb2\x6a\xda\x7f\x47\xab\x60\x45\xeb\x80\x0a\xc6\x76\x8d\xed\xa7\xe7\xcf\x2f\xeb\x1d\xd5\x49\xd4\x58\x8c\xbc\xe5\x02\x47\x51\xba\x62\x4a\x7e\xbd\x23\xe1\x17\x90\x27\x49\x01\x2b\x56\x43\x26\x47\x36\x74\x87\x37\x0e\x21\x43\x95\xf6\x1b\x77\x6c\x63\x8b\x3d\x1e\x9f\x60\xe4\x28\x15\x3b\x95\x99\x86\xab\x94\x5a\xda\xbb\x33\x95\xa3\xec\xb9\x62\x35\x18\xf4\xfe\xee\x8b\xe2\xa8\xb9\x71\xd4\xf1\xc0\x55\x0b\xf2\x0d\xb7\x0a\x47\x6a\x6c\x58\x15\xe3\x2a\xb6\xd1\x06\xf2\xd4\x47\xbc\x4e\x83\x4d\x91\xda\x62\x92\x51\x76\x82\xf1\x3e\xfd\x57\x1a\x19\x7d\x7a\xc6\x32\x20\x8b\xcc\x4b\x92\x8f\xa6\xff\x59\x61\x82\x0b\x09\x29\x6b\xfa\xbe\x29\x06\x88\x1d\xac\xcd\xcf\x34\x83\xc1\x21\xdc\x86\xc4\x65\x92\x1d\xf5\x61\x24\x82\x4b\x6e\xb1\x28\x8c\x27\xfe\x67\xce\x9a\x98\xf5\xc7\x5f\xf7\x79\xb1\x2b\xf9\xc2\x16\x75\xb1\x31\x41\x37\xb6\xf6\xcb\x93\x0b\xb6\x57\xe2\xba\x79\x0b\x00\x00\xff\xff\xfe\x7b\x14\xd7\x8b\x05\x00\x00")

func compiledAuthoritynativeAbiBytes() ([]byte, error) {
	return bindataRead(
		_compiledAuthoritynativeAbi,
		"compiled/AuthorityNative.abi",
	)
}

func compiledAuthoritynativeAbi() (*asset, error) {
	bytes, err := compiledAuthoritynativeAbiBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "compiled/AuthorityNative.abi", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x33, 0x6e, 0x52, 0x85, 0x63, 0x98, 0xcd, 0x2f, 0x71, 0xb7, 0x3c, 0xb1, 0x1d, 0xc0, 0xfc, 0xce, 0x9a, 0xbb, 0xa, 0xfe, 0xd7, 0xb4, 0xa3, 0xa1, 0x93, 0x40, 0x78, 0x8c, 0x32, 0x8c, 0x36, 0x69}}
	return a, nil
}

var _compiledAuthoritynativeBinRuntime = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func compiledAuthoritynativeBinRuntimeBytes() ([]byte, error) {
	return bindataRead(
		_compiledAuthoritynativeBinRuntime,
		"compiled/AuthorityNative.bin-runtime",
	)
}

func compiledAuthoritynativeBinRuntime() (*asset, error) {
	bytes, err := compiledAuthoritynativeBinRuntimeBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "compiled/AuthorityNative.bin-runtime", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xe3, 0xb0, 0xc4, 0x42, 0x98, 0xfc, 0x1c, 0x14, 0x9a, 0xfb, 0xf4, 0xc8, 0x99, 0x6f, 0xb9, 0x24, 0x27, 0xae, 0x41, 0xe4, 0x64, 0x9b, 0x93, 0x4c, 0xa4, 0x95, 0x99, 0x1b, 0x78, 0x52, 0xb8, 0x55}}
	return a, nil
}

var _compiledEnergyAbi = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x56\x4f\xeb\xd3\x40\x10\xfd\x2e\x73\xce\x49\x50\x24\x37\x3d\x78\x13\x0f\x7a\xfb\x51\x64\x92\x4c\x64\x61\x77\x66\xd9\x9d\x4d\x0d\x3f\xfa\xdd\x25\x31\x7f\x0a\x26\x69\xac\x6d\xed\x29\x81\x7d\x33\xfb\x5e\xf2\xe6\x31\x2f\xaf\x50\x0a\x47\x45\x56\xc8\x35\x24\xca\xc0\xb0\x4f\x1a\x21\x7f\x39\x64\xc0\xe8\x08\x72\x50\x51\xb4\x5f\x93\xf7\xb6\x85\x0c\x24\xe9\x80\x78\x1d\x01\x90\x81\xb6\xbe\x7b\x4b\x86\xf5\xcd\xdb\x77\x70\x3a\x64\xe0\xb1\xc5\xc2\x12\xe4\x35\xda\x48\x19\x44\x45\xa5\xcf\x49\xb1\x30\xd6\x68\x0b\x39\x34\x86\x8e\x73\x6d\x9d\xb8\x54\x23\x0c\xa7\xec\x9c\xd6\x50\x3d\xf1\x9a\x6e\xfd\x1e\x3d\x71\x45\x61\xee\x80\x55\x15\x28\xc6\xbe\xc1\x08\x6a\xd0\x26\x5a\x26\x38\x40\xd0\xfb\x20\x0d\x2d\x4b\x8b\xa9\x2c\xbb\x96\x53\x83\x42\xc4\xee\x94\xc7\xc2\x23\xe8\x7a\x91\x75\x10\xb7\xad\x50\x65\xfb\x1c\x9d\x24\xd6\xcd\x4f\xe0\xfe\xb7\xfe\x55\xef\x55\x54\x1a\x87\x36\xee\x31\xde\xfb\x9d\xbc\x7c\x0a\xff\xc0\x28\xb6\xae\x10\x7b\x89\x4f\xd4\x60\xf8\xc7\x2d\x09\xad\x5b\xe4\x06\x06\xd0\x80\x1c\xeb\x7e\x96\x9e\xc6\x04\xb3\x00\x39\xf2\xa5\x31\x5f\xcf\x82\xb3\x41\xb7\x56\x8e\xc8\xe5\x8a\xd5\x03\x39\x34\xdc\xfd\xb5\x7b\xc6\xd9\x76\xca\x7e\x4c\x81\xa9\x7a\xaa\x94\x7d\x48\x00\x8d\xfe\xfb\xf4\xfb\xb2\xa7\xf1\xe0\xcc\xb0\x7f\x3c\x7c\xe8\xff\x7a\x24\x66\xc2\x05\xda\xce\xeb\x5f\xea\x65\xd6\xc3\xf1\x1d\x4c\x85\x2c\xdc\x3a\x49\x71\xc9\x55\x86\x2b\xfa\x49\xd5\xa8\xec\xb2\xc9\x56\x0a\xd6\x3c\x37\xc1\x87\xab\xf7\xaf\x01\xdf\xe6\x08\x1c\x40\xd4\x10\xeb\xd5\x92\x36\x42\x6b\xa5\x62\x73\x9f\xb9\x5e\xd8\x87\x7e\xbf\x41\xfb\x87\xb0\xc3\xaf\x00\x00\x00\xff\xff\x20\xee\x20\x26\xff\x09\x00\x00")

func compiledEnergyAbiBytes() ([]byte, error) {
	return bindataRead(
		_compiledEnergyAbi,
		"compiled/Energy.abi",
	)
}

func compiledEnergyAbi() (*asset, error) {
	bytes, err := compiledEnergyAbiBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "compiled/Energy.abi", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xfb, 0xb7, 0xa2, 0x4e, 0xfd, 0xd, 0x29, 0xfb, 0x9b, 0xc1, 0x89, 0xed, 0x4d, 0x49, 0x52, 0x73, 0x10, 0x50, 0x83, 0xf8, 0xa9, 0x5b, 0x2d, 0x23, 0xf9, 0x9f, 0x49, 0xe1, 0x6d, 0xf8, 0xdd, 0xe4}}
	return a, nil
}

var _compiledEnergyBinRuntime = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xe4\x58\x0b\x76\x23\xab\x0e\xdc\x52\x09\xa1\x0f\xcb\xe1\xbb\xff\x25\xbc\x43\xd3\x76\xe2\x78\x9e\x63\x9c\xcf\xdc\x73\x6f\xfb\x4c\xc6\x56\xd3\x02\x55\x89\x92\x68\x85\x43\x11\x21\x41\x81\xc8\x4a\x50\x02\xf2\x10\x53\x00\x2c\x56\x41\x78\xf1\x4a\x40\x54\x1e\xe7\x45\xea\x50\x46\x10\xed\xc1\x9c\xe2\x9c\xa7\x44\xb1\x69\xa5\x11\x5a\x74\xc5\xb2\xb6\xb1\xac\xdc\x50\xfa\xa8\xe9\xb0\x52\x3c\xc7\x46\x2d\xc4\x4a\xb2\xac\x35\x2d\xab\x94\x91\x83\x25\x5d\xd6\x91\x97\x55\x13\x62\x4f\xba\xc6\x06\x3f\xad\x2e\xa1\xa5\x40\xbc\xac\xfd\x9c\x2d\x37\x22\xd5\x58\x0f\x2b\xab\x5e\xac\x9e\x93\x31\x2d\x6b\xa2\x65\x2d\x44\x45\xdd\x97\x87\x48\xe7\xd8\x5a\xbd\x74\x43\x5f\xd6\xac\x62\x52\x26\x8a\x8e\xd1\xa4\x70\x74\x90\xcc\xf8\x2a\x16\xba\xcb\x2e\x07\xe2\x35\xcd\x67\x46\x13\x9d\xcf\x44\x08\x39\x3c\x38\x4d\x5e\x02\x40\x89\x04\x82\xcb\x9d\x34\xd7\x82\xc1\xef\xbd\xf6\x72\xe7\x95\x42\x9e\xac\x3a\x58\xc1\x4e\xa0\x04\x87\x4f\x56\xaf\xac\x7c\x76\x91\x26\x9c\x2b\x40\x0a\xe9\xf0\xc0\xf2\xd1\x26\xc7\x47\x09\x92\xf9\x36\x02\x92\xf5\xd9\x88\x64\xde\xbf\x8b\x24\x8f\x9f\x89\xe4\xc7\x90\xd0\x14\xbf\x8e\x44\x93\x7b\x24\x5a\x57\x82\x4b\xbe\xf5\xae\x98\x2b\x5c\x7f\x37\x66\x08\xd0\xbb\x19\x02\xc6\x9c\x41\x6f\x99\x3c\xe3\x9c\x39\x09\xf6\x20\xc1\xd9\xc9\x49\xe8\x76\x36\x87\xd0\x1b\x26\x0e\x67\xe7\xe9\x5f\xca\x1c\x4f\xe7\xac\xf1\xd8\x73\x1e\x70\x3c\xef\x11\xa7\x8f\xc5\xec\x5a\x05\x1f\xf8\xc9\x89\x68\x3a\xfe\xad\xfb\x0a\x3a\xd4\x64\xf9\xb2\x7a\xfa\xe2\x39\xb7\xce\x35\xf2\x31\xff\x14\xb3\xa9\x5d\x19\x4c\xe9\x0e\x95\x22\x48\xe1\x64\xeb\x01\x3e\xe9\x0f\xf8\x34\xf9\xe5\x5d\xe5\x19\x5f\xce\xa5\x30\xee\xf5\x81\xe7\x13\xff\xb4\x5d\xf5\x16\x75\xb1\x97\xd5\x90\x2d\xdc\x47\x6b\x45\x09\x89\x5f\xd7\x58\x4e\xed\xde\xeb\xa8\xff\x3c\x0c\x1f\x66\x53\xea\x5f\xd7\xe8\x18\xee\xf1\x8d\x61\xe2\x5b\xcc\x7e\x4c\x37\xa2\x96\x4f\x75\x23\x0a\x9e\xd2\x8d\x98\xfc\x07\x75\x23\x96\x3f\xe0\xd3\xed\xfb\x33\xe5\xca\x6a\x29\x71\x37\xaf\x8f\x0e\x0f\x3b\xb3\x2b\x53\x2c\x20\xab\xfd\xf4\x46\xef\xfb\xbb\xaf\xf4\x8a\x38\xd7\x8b\x08\x9a\xab\xbe\xc6\xc1\x13\xab\x03\x49\x73\x70\x21\x39\x11\x16\xe5\x5b\x84\x25\x0f\x7a\xbb\x6b\x26\xc6\x6d\xdd\xe7\xbe\xbe\x9d\xe3\xde\x71\x37\xed\x33\x7b\xce\xfc\x12\xbf\xd9\xdf\x6f\x1c\xbd\xcf\xcd\xf7\xb8\xaf\xec\x5a\xb8\x03\xe7\x3a\xc1\xbc\x83\xe9\xce\xd8\x77\x9c\xe2\xed\xfb\x9c\x75\x22\x06\xf8\x56\x2e\x7d\xd7\xcc\x3e\xf1\x10\x81\x87\x1d\x8f\x9b\x28\x8d\x46\x3d\x8a\xc1\x0a\x0f\xa3\x6a\x96\xc0\x45\x69\x20\xd6\x04\x0c\xb3\xd0\x4a\xd0\x58\x52\x19\x4a\x3e\xa8\x56\x66\xf8\x28\x42\xda\x8b\x92\x26\x8f\xcf\xee\x8d\x3c\x95\xe7\xe0\x78\x72\x7d\x30\x7d\x32\xbc\xb7\x66\x8f\x3b\xa3\x29\xfa\xdc\xc7\xd6\x20\x26\x9b\x33\xed\xee\x62\xa6\xd0\x43\xec\xee\x7a\x46\x1e\x7e\x62\x1f\xfb\x66\x46\xbc\x98\x8f\x27\x83\x4f\x68\x86\x59\x7b\xa0\x19\x36\x4f\x77\xdb\x9a\x61\xd9\xf6\x34\x63\x2f\x27\xa4\xcc\xca\x3c\xbb\xa1\x79\xfe\x5d\x2b\xb0\x51\x0d\x5c\x0b\x85\x57\x49\xba\xe1\xe8\xae\x42\xaf\xf8\x2e\xf8\x3a\x6c\x68\x30\xd1\xa4\xd5\xa2\x26\xed\x9c\x03\x8c\x55\xb4\xaa\x06\xe8\xb0\x10\xa0\x4d\xc9\xd8\xa2\xca\xfc\x65\x41\xc5\x68\x3e\x33\xbf\x69\x9c\xde\x04\x0f\xaa\x51\x93\x72\xc4\x38\x3c\xce\x8f\x12\x6a\x3a\xbb\x94\x73\x27\xf2\xa5\xea\x5e\xf6\xa2\x82\xc2\x7b\xfd\xd5\xc3\xe7\xc2\x7d\xb2\xb0\xde\x6a\xf8\xea\x70\xaf\xd1\xd8\x10\x95\x18\x3d\x8e\xaf\x60\xf7\x51\xf9\x8f\x1e\xbd\x31\xff\x9f\xb5\x7f\x50\x11\x5f\x5a\xbd\xa5\x0e\xdf\x5a\x25\xfe\x4a\x7d\x92\xf8\x47\x45\xdd\x55\xae\x5c\x6a\x2b\x32\xfe\x7a\xff\x91\xf2\xa3\xfe\x23\x95\x57\xfa\x8f\x54\xbf\xa5\xff\xf0\x2d\xce\xbe\x33\xb3\xfe\x4e\xe7\x23\x71\xe2\x77\xea\x64\x6e\xfe\x7b\x3a\x49\xe3\x33\x9d\x9c\xff\x1b\x9b\xe8\xbc\x92\xb2\x26\x15\xed\x16\x03\x94\xb4\x6a\xd5\x61\xa6\xa4\x5d\x59\xe5\xa2\x2d\x8f\x75\xf2\xbf\xca\xf2\x11\x75\xf0\x20\x11\x67\x2d\xb8\xf4\x9d\xf3\xf4\xa3\xf5\xd9\xca\xf1\xa0\x4e\xe8\x6d\x9d\x50\x91\xa8\x3e\xeb\xdb\xab\xb9\xf3\x71\x87\xee\xaa\x1d\xac\x8e\x56\x5d\xe6\xc9\xf4\x3f\xd4\xa7\x55\xa1\x07\xda\x5a\x55\x5e\xd0\xd6\x6a\xe5\x05\x6d\x5d\xbf\xae\xfa\x4a\x74\xf8\xea\x39\x8b\xed\x72\xe9\x25\xa1\x96\xd0\x3d\x5e\xd9\xe4\x1f\x62\xf3\x17\xf6\xe7\xcd\x19\xea\xfa\x3e\xe4\x09\x6e\x1b\x8f\x07\xdc\x36\xe1\x17\xb8\x6d\x9a\xf6\xb8\x3d\x6b\x45\xeb\xfd\x17\x6b\x45\xfb\x42\xad\x08\x47\xb5\xb8\xd6\x09\xe0\xb9\x5a\xb1\x9b\xa3\x69\x08\x06\x17\x59\x6f\xdf\xfe\x9d\x39\x8a\xcf\x73\xb4\xa7\x47\xfa\xd3\xf3\x27\xfa\x33\x33\x70\x6b\xc5\x9b\x6f\x42\xc8\x87\x47\xe6\x18\x44\x72\x98\x7f\x29\xe7\xe4\x55\x1d\xd1\x8a\xb4\xec\x50\xee\xb9\xa4\x51\x7a\xee\x95\x7a\x6b\xbd\xe7\xe0\x40\x8c\x25\x8d\x41\x57\x6e\x9f\x78\x13\x72\xa9\x9c\x40\x26\x15\x0d\x96\x2d\x5b\x60\x88\xcf\x33\xa0\xd5\xa4\x43\x87\x76\xa2\x81\x81\x24\x0a\xcf\x3a\x3c\xe7\x92\x7a\x0d\x5e\x99\x2a\xb2\xc3\xbb\x33\xb9\xcc\xa3\x97\x6a\x1d\xd4\xa2\xa0\x26\x20\xa4\xff\x05\x00\x00\xff\xff\x4a\xf0\x1e\xdc\x80\x1e\x00\x00")

func compiledEnergyBinRuntimeBytes() ([]byte, error) {
	return bindataRead(
		_compiledEnergyBinRuntime,
		"compiled/Energy.bin-runtime",
	)
}

func compiledEnergyBinRuntime() (*asset, error) {
	bytes, err := compiledEnergyBinRuntimeBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "compiled/Energy.bin-runtime", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x90, 0xb0, 0x4, 0x84, 0x20, 0xd3, 0xd6, 0x60, 0xd, 0xb8, 0xa8, 0xa6, 0x5e, 0x80, 0x9d, 0x87, 0xe2, 0x54, 0xe2, 0x9c, 0x12, 0xdd, 0xd3, 0x8b, 0x37, 0x3f, 0xdf, 0x45, 0x8, 0x56, 0x13, 0x60}}
	return a, nil
}

var _compiledEnergynativeAbi = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x91\x41\x4b\x03\x31\x10\x85\xff\xcb\x3b\xe7\x24\xe8\x21\x47\xef\x9e\x3c\x96\x22\xb3\xdd\xa9\x04\xb2\x93\xb0\x79\x53\x59\x4a\xff\xbb\x20\x2e\x6b\x55\x6c\x05\xb1\x3d\x06\xde\x0b\xdf\xf7\x66\xb5\xc7\xa6\x58\xa3\x18\x11\x39\xba\x06\x24\xab\xce\x86\xb8\xda\xc3\x64\x50\x44\x48\xdf\x8f\x08\xe0\x54\xe7\x97\xb6\x86\xc3\x3a\xcc\x01\x13\xa6\x9d\x3e\x3d\x2b\x11\x50\x9c\x9f\x3f\x58\xca\x9e\x8c\x37\xb7\x77\x6f\xe5\x2a\x93\x74\x59\x11\xb7\x92\x9b\x06\x34\x0a\xf5\xc1\x29\x5d\xca\x89\x13\x22\x76\x49\x5f\x96\xee\xd6\x6d\xc3\x54\x0c\x87\xf0\x03\xf5\x17\x2a\x16\x4a\x7e\xf4\x5a\xf3\x74\x79\xba\x5f\x6f\x3a\x48\xa3\x8e\xa7\xc0\x3f\xf6\xff\x73\xd6\x7b\x1f\x4d\xfb\x0b\xcc\xfa\xde\x3e\x7b\xd7\xb0\x04\x86\xe2\xc6\xef\xe1\x8e\x0d\x9b\x77\xa7\xcc\xba\x52\xf2\x99\x5a\x56\x6c\x0e\x5d\x83\x9c\xf4\xc7\x67\xfb\x03\x87\xf5\x6b\x00\x00\x00\xff\xff\x9c\x12\x1c\x7b\x4d\x04\x00\x00")

func compiledEnergynativeAbiBytes() ([]byte, error) {
	return bindataRead(
		_compiledEnergynativeAbi,
		"compiled/EnergyNative.abi",
	)
}

func compiledEnergynativeAbi() (*asset, error) {
	bytes, err := compiledEnergynativeAbiBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "compiled/EnergyNative.abi", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x1, 0x20, 0x2a, 0x6d, 0x32, 0x24, 0x1a, 0x54, 0xf9, 0xc2, 0x70, 0xcd, 0x11, 0x15, 0x91, 0xbe, 0xdb, 0x78, 0xce, 0xd6, 0x33, 0xc0, 0x36, 0xbf, 0xea, 0x9a, 0xd2, 0x5e, 0xe9, 0xdf, 0x5f, 0xec}}
	return a, nil
}

var _compiledEnergynativeBinRuntime = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func compiledEnergynativeBinRuntimeBytes() ([]byte, error) {
	return bindataRead(
		_compiledEnergynativeBinRuntime,
		"compiled/EnergyNative.bin-runtime",
	)
}

func compiledEnergynativeBinRuntime() (*asset, error) {
	bytes, err := compiledEnergynativeBinRuntimeBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "compiled/EnergyNative.bin-runtime", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xe3, 0xb0, 0xc4, 0x42, 0x98, 0xfc, 0x1c, 0x14, 0x9a, 0xfb, 0xf4, 0xc8, 0x99, 0x6f, 0xb9, 0x24, 0x27, 0xae, 0x41, 0xe4, 0x64, 0x9b, 0x93, 0x4c, 0xa4, 0x95, 0x99, 0x1b, 0x78, 0x52, 0xb8, 0x55}}
	return a, nil
}

var _compiledExecutorAbi = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x56\xc1\x6e\xdb\x30\x0c\xfd\x17\x9d\x7d\xda\x86\x61\xc8\x2d\xe8\x2e\x3b\x0c\xc8\x69\x97\x22\x18\x18\x8b\xed\x84\x39\xa4\x27\x51\x6e\x8d\xa2\xff\x3e\x74\xb6\x22\x39\x96\xb5\xa2\x75\xd1\x5c\x83\x47\xea\x3d\xbe\x47\x33\xd7\x0f\xaa\x66\x72\x02\x24\x6a\x73\x03\x8d\xc3\x4a\x19\x6a\xbd\x38\xb5\xb9\x7e\x50\x04\x47\x54\x1b\xf5\x13\xda\xd6\x72\x87\x56\x55\x4a\xfa\xf6\xe9\x27\xd0\xda\xa2\x73\xea\x71\x5f\x05\x94\xc5\x8e\x7f\xe3\x36\x42\xd9\xcb\xd8\x69\x5f\xa9\x16\x7a\x38\x34\x78\x7a\xc5\x09\x08\x7e\xf7\x02\x07\xd3\x18\xe9\xd5\x46\x11\x53\x00\x9d\x9e\xb9\xf1\x54\x8b\x61\x52\x8f\xd5\xf3\x98\xd6\x4c\x62\xa1\x96\x22\x53\x8d\x02\xf5\xaf\x1f\x2c\x86\x6e\xaf\x62\xc1\x7b\xf0\x15\xb0\xb7\x98\x63\x5b\x45\x8c\x06\x81\x88\x38\xf4\x82\x13\x35\xad\xe5\x96\x1d\x4e\x04\x9c\x8a\xcf\xea\x3e\x7e\xf8\x57\xb9\xaa\x38\xb1\x3e\xab\x2d\xff\xf4\x84\x34\x34\x2e\x4f\x5b\xcc\x11\x77\x83\x2e\x1d\xfb\x78\x43\xf2\xf9\x53\x3a\x9b\x51\x7b\x2e\x98\x11\xf4\xc7\xb3\xf5\xc7\x69\x9b\x2f\x29\x60\x88\x37\x34\x57\xec\x49\x0a\x38\xbc\xc7\xda\x4b\xca\xe8\xc0\xdc\xa4\x88\x67\xd8\xb9\xe4\xe6\xff\x3d\xe9\x0c\xde\xad\xe0\x46\x66\x21\xc2\x7e\x2f\xb8\x61\x34\x92\x3c\x71\x98\x3b\x1a\x75\x19\xda\xf1\x5d\xea\xc4\x30\x9b\xf5\x94\x2d\x2f\x51\x08\xd3\xb7\xaf\xc5\xcc\x8d\xf6\xbd\xe9\xa6\x9f\x8d\x7f\x3e\xe2\x90\xb1\xe2\xae\x8e\xc9\x7b\xe7\x54\x74\x93\x0f\xe4\x42\x36\x2e\xd8\xef\x71\xe4\x97\x7c\x89\x40\x2e\xe6\x12\x15\x6e\x7c\x72\x8b\x0a\x9f\x82\x44\x95\xd6\x6f\xf8\x37\x00\x88\xa9\x3f\xb2\x77\x39\x35\x86\x34\xde\xa3\x0e\x89\x3f\xbb\x36\xd9\xc0\x54\x49\xd5\xd8\x30\xe8\x18\x1e\x2d\x49\xdd\x8d\x9d\x23\x08\x3b\x24\x79\x29\xd1\xb2\x09\x2f\xa7\xb9\x9d\xf5\x7d\x15\xcd\x90\xed\xad\xd6\xab\x53\x9d\x2d\xc3\x94\xf0\xfe\x6f\x00\x00\x00\xff\xff\xc0\x31\x94\xc7\xb3\x0a\x00\x00")

func compiledExecutorAbiBytes() ([]byte, error) {
	return bindataRead(
		_compiledExecutorAbi,
		"compiled/Executor.abi",
	)
}

func compiledExecutorAbi() (*asset, error) {
	bytes, err := compiledExecutorAbiBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "compiled/Executor.abi", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xf9, 0x49, 0x26, 0x69, 0xd5, 0x7a, 0xf5, 0xed, 0xd3, 0xf, 0x76, 0x6, 0xc9, 0x17, 0x22, 0xe8, 0xed, 0x72, 0xb1, 0x42, 0x23, 0x37, 0x75, 0x92, 0x80, 0x20, 0xcf, 0xa6, 0x23, 0x95, 0x10, 0x81}}
	return a, nil
}

var _compiledExecutorBinRuntime = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x5c\x09\x72\xab\x3c\x0c\xbe\x92\x16\x4b\xb2\x8f\x63\x83\x7d\xff\x23\xfc\xe3\x85\x84\x84\x24\x40\xda\xa6\x7d\x33\x7f\x3b\xaf\xe5\x39\x78\x41\xeb\xa7\x85\x2a\x78\x50\x70\x20\xa4\x00\x8e\x15\x41\x11\x20\x16\x31\x05\x00\x16\x9b\x00\xe1\xcd\xaf\x00\xe0\x94\xcb\xf8\x42\xf5\xa0\x0c\xd1\xa9\x2b\xe4\xd0\xd5\x7d\x92\x13\xab\xa3\x9a\xbc\x1a\xa6\xd0\x47\x8b\xf5\x51\x23\x0b\xa0\x38\xb5\x51\xe4\xd8\x47\xbd\xf7\x24\x21\x5a\x1f\x9d\xcb\x18\x8d\x93\x66\x17\x4a\x1b\x65\x1a\xa3\x69\x86\x39\x50\x4a\x7d\x34\x84\x3e\x3a\x85\x30\xa9\x0f\xb1\x8f\x4e\x71\x19\x2d\x4e\x83\xf9\x3e\x5a\x52\x1f\x9d\xdd\x34\xab\x87\xbe\x82\x13\x1d\xa3\x13\xcd\x2e\x86\xfe\x14\xce\x8f\xf3\x66\x66\x2c\x53\xa4\x3e\x5a\xd7\x95\x54\xa9\xe8\xa1\xcc\x92\xd8\x79\x40\xa9\xcf\x37\x41\xa7\x6e\x1f\x97\x46\xf1\x22\x95\xfe\x1e\x58\x81\x3d\x02\x06\xf0\xe0\x2b\xfd\x2f\xf4\xdb\xfb\x42\x0d\xa0\x40\x50\xe7\x06\x0a\x18\x40\xda\xb7\x22\x08\x26\x51\x49\x00\xab\x53\x60\x5d\xfc\xee\x14\xc8\xfe\x07\x4f\x61\xcc\xdb\x53\x38\xdd\x9e\x62\xc2\xef\x3f\x45\x9d\x7f\x1d\xf3\x04\x78\x37\xd2\xf4\x00\x0b\x60\x1d\xf1\x10\x10\x1c\x50\xff\xb4\xe9\x47\xbd\x07\xc7\x35\x79\x08\x3c\xd6\x45\x8f\x32\xee\xf3\xec\xd9\x83\x27\xef\xd8\xea\x0e\x01\x05\xae\xdf\x01\xdb\x0c\x5a\x51\xc4\xe7\xc6\x97\xbe\x7e\x9d\x59\x29\x81\x01\x75\xf9\x7d\x5d\xbb\xaf\xb5\xdc\x19\xaa\x34\x43\xe1\x35\x25\x73\xda\x50\x92\x20\x3f\xa6\xe4\xb2\xfe\x53\x5e\x15\x0e\x37\x27\xf3\x6a\x5b\x1a\x3f\x1a\x5b\x51\xc3\xce\xf0\xeb\xcc\xbd\xab\x3d\x54\xa1\x9d\x04\xee\xc6\xe5\xc9\xb8\x43\xe9\xdf\x6b\xae\x7d\xe0\x9c\x83\xce\x9e\x3c\x02\x7b\x12\xf2\xdc\x24\x07\x6f\x39\xec\x9b\x9c\xad\x64\x92\x3d\x57\x5e\x49\xaa\xf7\x63\xe7\x34\xe5\x5c\xed\x4d\x95\xb0\x3a\xdf\x3b\x18\x6b\x74\x0e\x77\xce\xcf\x4d\xd7\x2e\xb2\xd7\xfe\xf5\xcf\xab\x94\x57\x5b\xdc\xd6\x62\x4c\x63\x2d\xae\x7b\x6b\xa3\x47\xdb\x9f\x9b\x8d\x00\x88\xc0\x0f\x24\x31\x09\x04\xbf\x96\xee\x21\x39\xcf\xe5\x93\x79\x2b\x9f\x6c\xf0\x73\xf6\xa6\xaa\xd7\x8d\x0c\xf3\x73\xed\xf2\xb4\x95\x8b\x40\xfb\xcf\x14\x65\xfb\x4c\xd3\x13\x1b\xba\xa7\x73\x08\xa9\x6c\xec\x23\xcf\x5b\xfb\xc8\x73\x51\x44\x49\xf9\xde\x76\x3c\x92\xf8\x5d\xbb\xe1\xc0\x36\x3b\x38\x9e\x7e\x90\x2f\x32\xe3\xed\xc9\x1f\xd0\x7e\xf7\xd4\x4a\xdb\x53\xfb\x27\x3e\x74\x97\xf2\x52\x70\x43\x79\x17\xb6\xfe\xd1\x3d\xe3\xed\xb7\xd0\x25\xe2\x96\xff\xee\x01\xff\x05\xc3\xcf\xf8\xc7\x5d\x3a\x4d\x7e\x5e\x4e\x58\xcf\x41\xac\x48\x8d\xec\x0b\xce\xf1\xf4\xf3\xb6\xb4\xda\x31\xb9\x78\x66\x00\xaa\x36\x04\xfb\x75\x00\x71\x01\x16\xcb\xd5\xf0\x67\xd3\x87\x2a\x5d\x15\xda\xc2\x54\xa9\x59\xa5\xca\xca\x64\xc0\x53\x42\x7a\x17\xdd\xf6\x53\x80\xab\xd6\x7d\x6b\xdf\x15\xc8\xad\xed\xbf\x15\x25\x13\x0d\x3a\x99\xd3\xa0\x99\x23\x81\x89\x66\x4d\x9a\xb5\x98\x69\x26\xd0\x62\x44\x60\x54\x59\xae\x45\x93\x8a\x3a\x02\x45\x03\x03\xa3\xeb\x6a\x56\xb4\x98\xaa\xd8\x97\xce\xde\xf5\xeb\x89\xae\xcd\x0b\x47\xdb\xcf\x0f\x78\xc8\x57\x5c\x5d\xf8\xe9\x51\x9c\xc7\xca\x51\xa0\x2e\xa7\x9e\x2b\x67\x81\xd0\x02\x88\x48\x9b\xd3\x4e\x8c\x1e\x9f\xc9\x82\x1f\x52\xad\x6d\x57\xe0\x76\xfd\x62\x87\x3e\xeb\xba\x47\xd3\x41\x9d\xc8\x23\xc3\x99\x67\xad\xba\x92\xe7\x00\x6d\xbf\x55\x54\x54\xb5\xc7\x9f\x5a\xc9\x0a\x57\x77\xea\x6c\x66\x9d\x48\x65\xb6\x3c\x95\x59\x63\x86\x19\x8c\x12\x96\x54\xcc\xaa\x3d\xc9\x3a\x71\x2e\x20\xe8\xaa\xc4\xf0\x5c\xe6\xec\x55\x26\xb6\x8b\xed\x05\x2b\xb7\xf2\xf6\xbe\x2c\x75\x2e\xde\x4b\x52\xac\x5e\x54\x9b\xbd\x30\x4e\x37\xf6\xa2\xa1\xdd\x5f\xb3\x18\x7b\xb6\xc2\x13\x7d\xd0\x56\xc8\xae\xad\x50\x2d\xfd\x7f\x6a\x54\x23\xe6\xa2\xd9\x9c\x91\xa2\xb2\x55\x2b\x51\xad\x48\xb7\x16\xce\xdc\x8d\xad\x40\x65\xf5\xef\xf1\x16\x4e\xd8\x8a\x0b\x47\x7f\xcb\x5a\x9c\xb0\x13\x67\xf5\x4d\xb2\xc7\x08\x2e\x39\x9f\x33\x4b\xf0\xe2\x69\x26\x9a\xd5\x26\xcf\x79\x32\x96\xe4\x26\x57\x24\xd3\x8c\x61\x8a\xe4\x26\xf5\x3c\x47\x4a\x71\xc6\x1c\x29\xe5\xb5\xbe\x69\x0d\x79\xdd\xfb\x5c\x39\xa8\x6f\x57\xeb\xed\xce\x3c\x2b\x8e\x08\x49\x11\x82\xcd\x9f\xd3\x00\xb4\x3d\x0d\xa8\xbf\x4d\x15\x75\xd2\x50\xfd\x62\xa5\xa1\x91\x5a\xa5\xe6\x0e\x95\x5e\x4b\xed\x4b\xe4\x30\x6c\x02\x0e\x9a\xc4\x8e\x96\x3f\x44\x93\x5d\xab\x50\xb5\xfe\x8a\x10\x16\x54\x60\xfc\x7c\xbf\x23\x34\xf1\xc0\xbf\xec\xf1\x9f\xfb\xee\xca\x83\x18\xc5\xe4\x62\x6f\x7e\xed\xac\x4f\x4f\x29\x69\x48\x4b\x72\xee\x83\x3e\x64\xde\x95\x96\x3b\x39\xb9\x20\xce\x87\xbe\x65\xed\x43\xae\x7e\xa6\xa1\x05\xac\x2b\xd7\xab\xa3\xd6\xeb\x88\x0f\x71\xc4\xdc\x47\x97\x67\xf0\x7c\x34\xeb\x64\xfe\x8d\x2c\xf5\x40\xd4\xe0\x2b\x1d\x7f\x4a\x86\xf4\x55\xfe\x7c\x9c\x00\xdd\x7d\xb6\xa1\x67\x73\x3c\x03\xd7\x08\x4f\x28\x5c\x72\xf4\x4b\xcc\xfc\x28\x53\x54\xb5\x97\xaa\xaf\x83\x21\x7f\x13\xb4\xec\x8e\xe0\x90\x10\x58\xb2\x92\x37\xd9\xa2\x36\x07\xb8\x9e\xa0\xca\x6c\xd6\xe1\x3f\x1e\x64\x82\x3c\x60\xf0\x24\x58\x75\xc3\xbb\xf6\xbb\xc6\xef\xe6\x45\xe8\x26\xd7\x09\xf2\x84\xd3\x04\x7d\xcf\x66\x79\xb9\xe3\x85\x17\x59\xcf\x87\x7a\xf7\xd4\x46\x1c\x94\x96\xee\xe3\x2a\x7d\x72\xfe\xa0\x35\x2f\xbb\xfa\xe9\x4c\x0c\x9a\x7f\xe3\x8a\xe3\x7a\xfc\x37\x34\xb6\xea\x2a\x57\xef\xd7\x3c\xa1\x3b\x6a\xcd\x33\x3c\xca\x5e\x3b\x7a\x9d\xbb\x3d\x67\x53\x57\x3c\x42\x98\x39\xef\xfa\x54\x24\x42\xee\x52\x76\x37\xbf\xc9\xc5\x76\xec\x2e\x63\x7b\x2a\xd3\xb1\xce\xfe\x2e\x34\x7b\x57\xf2\x96\x9c\xeb\x55\x0a\xef\x30\xe7\x86\xaa\xab\x38\xf2\x01\xc5\xd7\x91\x2b\x6d\x57\xf7\xb7\xab\x1f\x7f\xea\xeb\xae\x67\x28\xb5\x3e\x8d\xdb\x9c\x06\xa7\x33\x51\xb2\x82\x6e\x57\x98\xcf\xad\xe0\xb7\x2b\xe4\x33\xb9\x80\xb8\x9e\xff\x30\x97\xf0\x49\x8a\x4e\xeb\xd3\x50\xb7\xda\x6b\x1b\xae\x08\x79\x2a\x23\x37\x81\xc4\xe2\x7b\x06\xbf\xe7\xdf\x3a\x96\xaf\x67\xb0\x12\x43\x0e\x11\x21\x96\x39\x07\x17\xd0\x4b\x75\x33\xc5\x69\x09\x2a\xe4\x67\xe3\x50\x48\x69\xce\x21\x58\x50\x73\x3e\xa4\x54\x72\xc6\x49\x26\xc0\x39\xf8\x78\x13\xfd\xaf\xad\xcb\x0f\x44\x23\xf5\xaa\x79\x04\x1a\xd5\xb0\xee\x5b\x9a\x67\xa9\x96\xa8\x55\x37\x9a\x5f\x5b\xe1\x2a\xec\x4f\xed\x4f\x5b\xfb\xb0\x9e\xe3\xb7\x73\xce\x65\x48\xaf\x6b\xe1\xf4\xcc\x96\xdd\xdc\x35\x1f\xba\x2b\xef\xdc\xf5\x14\x03\xbf\x71\xfa\x56\xe7\x14\xd7\xbc\x79\xd3\x02\xd4\x51\xfd\xad\x9f\x71\xb3\x7c\x14\x5a\x36\xf9\x54\xf5\x73\x5b\xfb\xa4\xa3\xfb\xd4\x71\x04\xdf\x2b\xff\x80\x05\x5b\xed\x43\x82\x58\xbf\xbf\x62\x19\x71\x75\x7f\xcf\x42\x01\x17\x0f\x37\x66\xa9\xa4\x8e\x62\xc2\x45\x76\x68\xc8\x4e\x00\x49\x5d\xaf\x3b\x62\x82\x51\xef\x5a\xd0\x24\xb6\x35\xd4\xc4\x7c\x3d\x0b\x8f\x4a\x58\xc7\x44\xe9\x16\xbd\x78\x5b\xa2\xe8\x33\x92\x5a\x39\xf6\x9a\x87\x0b\xa7\x05\x3c\x5d\x77\xf8\x35\x24\x34\xe2\x5a\x44\xe3\x0f\x22\xa1\xb4\x9b\xed\xda\x62\x9e\x25\xbf\x55\x63\x15\xd1\xbc\xb6\x54\x07\xe3\xda\x4e\xe3\x57\x35\xf6\xa7\x34\x7e\xae\xb3\x4b\xb6\x04\x09\x3f\x18\xeb\x61\x7c\x83\x82\x62\x5e\x45\xd9\xa4\x23\xcb\xfb\xfd\x76\x29\x48\x10\x38\xfa\x5f\x94\x56\x57\x2d\x09\x2c\xf4\x9e\x3e\x58\xcb\xc1\xf0\x1e\xbd\x0d\x1e\xc7\xc9\x1f\x90\xd8\xa7\x1e\x6b\xf9\xf9\x15\x2e\x3e\xf7\x74\x43\x2b\xe0\xa2\x17\x1c\xe1\x4f\x59\x16\x34\xd1\x62\x75\x7c\xee\x15\x38\xeb\xb1\x56\x30\x56\xd5\x70\xcb\xab\x83\x7c\xc2\x2f\x52\xf3\x14\xaa\x7d\x53\x2a\xbe\x05\x55\x9c\xca\x7c\xbc\x4b\x13\x5a\x30\xc7\xc8\x73\x1c\x47\x15\x2e\x96\x1b\x54\xe1\x2a\xca\xd8\x45\x15\x75\xd6\x57\x51\x85\x0b\xf4\x1c\x55\x2c\x92\x03\x70\xed\x45\x01\xee\x51\x8d\x57\x89\x65\xc8\xd6\xd0\x18\x91\xf2\xa7\xaa\xd4\xaf\x3d\x49\xd0\xa2\xf9\x52\xb5\x96\xdb\xac\xe1\xd6\xd3\x9c\x3d\xfb\x5e\xd6\xf0\xa7\xe2\xa2\x57\xde\xf2\xcc\xd9\x77\xab\x34\xaf\xf3\xdd\x78\xad\x95\xbe\x46\xa1\x3b\xf3\xff\x02\xc6\xd4\xde\x2d\xf5\x67\x3c\xc1\x4f\x60\xcc\x3f\x5c\x3b\x19\x5c\x30\xf5\x7f\x09\xa7\x6e\x6b\x12\xaf\x2a\x0c\xff\x20\x4e\xf5\xf4\x49\xfc\xf3\x2f\xe1\x54\xee\xd7\x7f\xaf\x7e\x77\xc1\xae\xbe\x7c\xb2\x3e\xf0\x4e\x4c\x77\xa3\x3d\x6f\xe8\xca\x57\xb0\xeb\xaf\xf3\xef\x03\xa8\x79\x44\x3b\x47\xfb\xc9\x06\x82\x3c\xd5\x4d\xf6\x63\x08\xe6\x85\x6c\x1c\x95\xd7\x23\x7d\x5d\x18\xc9\xee\xfa\x40\x4f\xe4\xd5\xd7\x1d\x27\x18\xe7\x4f\xf6\x67\xe2\xd9\x8e\x93\x07\x5d\x57\xa8\x4e\x5d\xf3\x58\x7c\x83\x7c\x9f\x74\x60\x9c\xa5\xfd\x4e\xcf\xd5\x1f\xee\xa0\x6b\xfc\x4c\xd3\x27\xfb\x1f\xf6\x7d\xdf\x5e\x0f\x1d\xea\xd4\xbc\x20\xaa\xb3\xb0\xe6\xe7\xd2\x57\xf7\x6e\xd7\xd6\x41\x7e\xe2\xff\x3d\x74\x07\x7b\xe8\xbe\xc4\x8d\x13\xb6\x6d\x0a\x72\x67\xdb\x4e\x69\xdb\xca\xb6\xcd\xf4\xc9\xfc\xf0\xae\x2e\x6c\x6c\xdb\x1d\x0e\x7f\x41\xaf\x9d\x6e\x3a\xa0\x9e\xd9\x68\xc9\x95\xd5\xf3\xc7\xbf\xfd\xfc\x41\x6b\x9c\x9f\x5b\x26\xd0\x59\xf8\xca\xf3\xf7\x38\xf0\x5c\xdf\xe5\x77\xea\x30\x60\xcb\x99\xad\x38\xa0\x88\x59\x3f\x49\x7f\xff\x46\x2f\x9a\x98\xd7\x60\x6c\x6e\xeb\x3d\x8f\xd1\xbf\x94\x83\xdd\x9c\x4b\x6c\x96\x3f\xda\xff\xb3\x9f\x91\x70\x5a\x5a\x3f\xe7\xac\xa8\xd9\xc2\xeb\xce\xce\x63\x34\x71\xa3\xcb\x60\x5d\xbd\xbd\xa2\xe0\x1b\xe9\xc1\xa5\xcb\xa6\xe7\x2a\x7f\x53\x82\x6f\xfb\x3e\xc2\x05\x21\x57\xcf\x73\xd7\x29\x73\xfa\x1d\x91\x30\xfa\xec\xce\xbd\x29\xf2\x0e\xb2\x57\xc4\x32\xab\xa7\xd3\xef\x89\x10\xd3\x93\xf7\x44\x4e\x21\xeb\xef\x7d\x4f\xa4\x63\xdd\xaf\xbf\x47\xf0\xc2\xe7\x36\xaf\x7b\x8e\x5a\xe7\xa2\xcf\xc5\x1a\x12\xf4\xb7\xa5\xff\x4a\x64\x7f\x93\x6d\x2e\xdf\x91\x05\xab\x94\xb4\x22\xdd\x76\xd4\x35\x9d\x05\x03\x95\x73\x4f\x66\x76\xb6\xaf\xf6\x6c\x45\xa9\x22\xef\x38\x87\x48\xd8\xdf\x75\x6e\xcf\xc1\x6b\xb9\xff\xca\x5f\xa0\xb8\xf4\xf8\x76\xde\x7c\xe2\x4d\xef\x4f\x44\x63\x97\x5e\xe1\x87\x15\x25\xf3\xc0\x09\xa5\xd7\xc4\x08\xcb\xdd\xfb\xbd\x12\x0b\x5e\x3e\x25\x48\x62\x3c\x8f\xcc\x75\xee\x57\xe3\xbe\xeb\xf7\x6d\x0d\x81\x5a\x3d\x6e\xd8\xc8\x8e\xf7\x86\x56\x11\x45\xb1\x92\x25\x81\x0b\xfd\x2f\x1e\x8c\xd9\xff\x86\x24\x22\xcf\x1c\xe3\x44\xff\x4b\xe2\xd1\x3d\x4e\x49\x22\xf3\xf4\x42\x12\x59\xe0\x98\x24\x1e\xad\x09\x3f\xaa\xe4\x5e\x7b\xdc\x5a\xd5\xb8\x7a\x75\xf2\xb4\xd4\x8b\x69\xfc\x85\x18\x69\x9e\xbd\xe1\x23\xf6\x75\x07\xf3\x22\xed\x8c\x93\x2d\x27\x80\x81\x3d\xea\x27\x9e\x70\xf9\xd4\x02\x36\x6c\x52\xef\x41\xc4\x31\x5e\xcd\x3b\xb5\x2e\x7c\xb9\x56\x9e\x57\xb5\x64\x24\x8e\xcd\x62\x2f\xfd\x9e\x75\x64\x76\x4b\x27\xe8\x7c\xed\x04\x6d\x51\x29\x71\x89\x4d\xb7\x52\xeb\xbe\x1f\xbb\x94\xe5\x4d\xf1\x05\x01\x8f\xf7\x61\x01\xdb\x1a\x79\xbd\x46\xfd\x09\x10\x2b\xa8\x20\x8b\x16\x8d\x18\xc4\x13\x68\x72\xa9\xf0\xac\x82\xa9\x20\x85\xc4\x1c\x92\xc1\xe4\x64\x42\x4e\x14\x67\x61\x48\x9a\x93\xb8\xac\x60\x1e\x62\x8d\xcd\x73\x72\x88\xa4\x56\x68\x4e\x95\xf4\xff\x05\x00\x00\xff\xff\x94\xf5\x3f\x60\x52\x48\x00\x00")

func compiledExecutorBinRuntimeBytes() ([]byte, error) {
	return bindataRead(
		_compiledExecutorBinRuntime,
		"compiled/Executor.bin-runtime",
	)
}

func compiledExecutorBinRuntime() (*asset, error) {
	bytes, err := compiledExecutorBinRuntimeBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "compiled/Executor.bin-runtime", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x39, 0x14, 0xf0, 0xc8, 0x2f, 0x55, 0x32, 0x26, 0x2f, 0x68, 0xe2, 0x9b, 0xd4, 0x73, 0x91, 0x90, 0x68, 0xf, 0xfd, 0x95, 0xbf, 0x57, 0x1, 0xf1, 0x7f, 0xb4, 0x98, 0x9b, 0x68, 0xec, 0xfa, 0x6f}}
	return a, nil
}

var _compiledExtensionAbi = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xd4\xd4\xb1\x6a\xc3\x30\x10\x06\xe0\x77\xb9\x59\x93\xdb\x86\xe2\xb1\xb4\x43\x87\x42\x69\x0a\x1d\x82\x87\x93\x7d\x2e\xc2\xf2\x49\x48\xa7\x34\x22\xe4\xdd\x8b\x4d\x9a\x64\x28\x8d\x97\x04\x77\x33\x58\x3f\xf7\xf1\xfb\xac\xd5\x16\x6a\xc7\x51\x90\x05\x4a\x09\x89\x14\x18\xf6\x49\x22\x94\xab\x4a\x01\x63\x4f\x50\x82\x38\x41\xbb\x4c\xde\xdb\x0c\x0a\x5c\x92\xfd\x89\xed\xcf\x01\x50\x20\xd9\x0f\x4f\xc9\xb0\x14\x77\x0b\xd8\x55\x0a\x3c\x66\xd4\x96\xa0\x6c\xd1\x46\x52\x10\x05\x85\x5e\x92\xa0\x36\xd6\x48\x86\x12\xd6\x86\xbe\x8e\xd9\x36\x71\x2d\xc6\x31\xec\xd4\x1f\xac\xc3\xd0\x06\x05\x8f\x61\x9d\x85\xe2\x38\x76\xff\x5a\x5b\xec\xa8\xd0\x03\xe6\x8c\x79\x8c\xde\x14\x17\x34\x9f\x54\xb9\x79\xda\x78\x13\x70\xcc\xcc\xa7\x4b\x4e\xfd\xef\x73\x0f\x65\xba\xba\x5b\x9a\x4f\xa6\x70\x4e\x8d\x4d\x13\x28\xc6\xd9\xa8\x9f\x1f\xe7\xf5\xfd\x1f\x06\xd4\x1b\xb5\x93\x54\xf7\x57\x42\xbd\x06\xb7\xa6\xe6\xc3\x85\xee\xbf\x2d\xe5\xfb\x78\x37\xd5\x2e\xd0\x14\xf9\xe2\x76\x3e\x70\xd3\x4f\x22\x5f\xb6\xec\xd3\x25\xb8\xd6\x9f\x52\x7d\x07\x00\x00\xff\xff\xa8\xc1\x0c\x3e\x76\x06\x00\x00")

func compiledExtensionAbiBytes() ([]byte, error) {
	return bindataRead(
		_compiledExtensionAbi,
		"compiled/Extension.abi",
	)
}

func compiledExtensionAbi() (*asset, error) {
	bytes, err := compiledExtensionAbiBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "compiled/Extension.abi", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x5, 0xa5, 0x79, 0x25, 0xed, 0x73, 0xce, 0x45, 0xc, 0x54, 0x36, 0x50, 0xc0, 0xc0, 0xa7, 0x8c, 0x26, 0xdb, 0x55, 0x3c, 0xee, 0x67, 0xf6, 0x6c, 0x93, 0xad, 0xe9, 0x16, 0xd0, 0x16, 0xa5, 0x7d}}
	return a, nil
}

var _compiledExtensionBinRuntime = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xd4\x97\x0d\x52\xe3\x30\x0c\x85\xaf\xf4\x24\x59\xb2\x74\x1c\xff\xc4\xf7\x3f\xc2\x8e\xe3\x14\x28\x65\xba\x24\xec\xc2\x10\x06\x68\x5f\x6c\xd9\xfa\xa4\x48\xb1\xc1\x61\x48\x50\x36\x20\x89\x11\x8c\x80\x92\x34\x1b\x00\xd1\xdc\x40\xb8\x78\x05\x90\x4c\xc6\x71\x91\x39\x4c\xc0\x6a\x1b\x67\xa7\xb4\xaf\x13\x9a\xa7\x2a\x32\xa8\x6f\x43\x97\xda\xd3\x52\xd5\x75\x2b\xb9\xf5\x5d\x25\x3d\xc6\xe6\x9e\x83\x8a\xad\xb1\xe4\xc7\x58\x67\x86\x79\x8e\xa5\x0e\x5a\x6a\xe9\x3d\xa1\xd6\xb6\xab\x2c\x65\xa9\x15\xea\x79\xd0\xa1\x46\x3d\xd4\xda\xa8\xd6\x56\x97\xda\x6c\xa9\xbd\x06\x77\xf0\xb6\xab\x42\xc7\xd8\xd1\x90\xcb\xa0\x43\xd5\xa6\x59\xeb\xe4\xe5\x18\x5d\xab\x24\x07\xe9\xf4\xa4\xea\xe2\xb8\x74\xdd\xd9\xd6\x6d\xce\xf1\xa1\x36\xe7\x24\x28\x39\x9c\x9d\x66\x04\x18\xa0\x20\x85\xe2\x76\x27\x08\x12\x18\xf2\xd6\xea\x86\x07\xab\x24\x73\xfd\xe4\x10\x83\x38\x81\x02\x0e\x87\x68\xe0\xb0\x0a\x67\xd0\x3b\x65\x8f\x3d\x0d\xd0\x54\xf6\xb5\x12\x8e\x5d\xac\xf5\x03\xd3\xd6\xca\x0f\x47\x48\x70\xec\xda\xeb\x6e\x5d\x5c\xf6\xfd\x27\xc9\x73\x85\xb5\xfb\xdb\x4f\xd0\x3e\x83\xe3\xf8\x6e\x84\x24\x7a\xef\xf9\xf4\x84\x82\xec\xf6\xff\x04\x09\xb2\x47\xbe\x64\x93\xaf\xa6\x7e\x99\x2f\xc5\x07\x7c\xcb\xf8\x1b\xdf\xc5\xe6\xc5\x4f\x1d\x71\xbf\x83\xfc\xf2\x24\xfc\xed\x22\x3b\x33\xf6\x8c\x67\xa3\x3f\x78\xc6\xd4\x4e\x7a\x66\xd5\xff\x59\x04\x39\xd9\xe3\x8e\xd2\x30\x42\xce\xf9\x1d\xbf\xfc\x59\x26\x2f\x6c\x82\xec\xda\xac\x33\x1e\x94\xfc\xe8\x41\x9d\x7f\x9d\xae\xe7\x20\x77\x7e\xb4\x3a\xe8\x64\xa4\xbc\xc9\xbb\x48\x3d\xd0\x20\xfb\x48\x3b\xb1\x53\xe1\x47\xff\x25\xd9\xc9\x9d\x86\xf3\x65\x56\x62\xfe\xb8\x83\x4c\x46\x28\xa9\x7e\x35\x53\xf7\x2e\x88\x33\xcf\xa3\x09\xa5\x0a\xca\x6d\x3b\xac\xd1\xdb\x1e\xf8\x95\x7e\x8a\x83\x0a\xd2\xaa\xd8\x2f\x7e\xc9\xa4\xbc\x13\xc8\x0e\xa9\xa4\x37\x32\xe3\x5d\x7d\xd4\x32\xe8\xe5\x6e\x42\x68\x96\xbe\xee\xcb\xb6\x3e\x1d\xe3\xf0\x4a\x63\xea\x0c\x27\x3a\x66\xd1\x78\x6b\xf3\x35\xba\xb3\x5b\x7c\x14\xdd\x58\xbf\x76\x8d\xa5\x23\x79\x2d\x9e\x5d\x0e\x6f\xf9\x7f\xd0\x5c\x9d\x70\xef\x67\xec\xb3\x3b\xb3\xb2\xcb\xde\xe7\xe8\x3e\x47\xee\xfd\x9c\xec\xe7\xce\x00\xad\x73\xfc\x8d\x51\x1d\xf3\x3d\x61\xf6\xc3\x39\xdf\x13\x0e\x1b\x8b\xd6\xea\x83\x25\x4d\x26\x7a\x47\x69\xdd\x9f\x3d\x79\xbe\x2d\x2d\x5b\x5b\x3b\x6c\xc9\x5c\xdb\xf6\x9e\xbb\xaf\x3f\x5f\xd6\xa6\xf7\x05\xf2\x41\x2e\x57\x45\xf0\x2d\x8e\x9f\xc8\x15\x45\x7d\x92\x2b\x3a\xa3\x7e\x3a\x57\x54\xf4\x42\xae\xac\x6f\x17\xf3\xa5\x47\xdf\xb6\x52\xf4\xc7\x9f\x3d\xad\xf2\x8c\x67\xcb\x57\x78\xf6\x7e\x8e\xe7\x5b\xef\xbf\xf6\x1c\x5a\x0f\xa3\x24\xf1\xdf\x9f\xc3\x3b\xbb\x77\xa7\x87\x87\x5a\xfd\x89\x28\x58\xb6\x27\x51\x30\x2f\x17\xa2\x60\x05\xdf\x9e\xd5\x90\x59\x1d\xf8\x97\xd1\xcf\xf2\xac\xff\xe4\x74\xa5\xff\x64\xbd\xd2\x7f\xbe\x44\x9f\x4b\xde\x1a\xf0\xf3\xfd\x3c\xf7\xfe\x8c\xe7\x3c\xf5\x9e\xe6\xe9\xc8\xdf\xd9\xcf\x29\xba\x0d\x6e\xed\xc7\x59\xba\x3f\xab\xcf\x1e\x57\xea\xb3\x97\x93\xf5\xf9\x6b\x2c\x2b\x73\x6e\xd2\xeb\x2f\xab\x0a\x91\xf0\x84\x7c\x68\xba\x40\x3e\xac\x7c\x77\x55\x68\xa3\x31\x57\xfe\x6d\x1d\x31\xc6\x78\x42\xbf\x90\x5c\xa0\x5f\x38\x4e\xbe\x97\x7c\x70\xe6\xfc\x07\x5d\xd2\x7a\xaa\x7d\x9e\x3d\x7f\xb8\xb6\x94\x4a\xcf\x18\x37\xbd\xc2\xb8\xd7\x6b\xb5\x05\x28\x64\x6a\x9c\x4b\x2e\x99\x05\x3a\x8f\x25\xc9\x10\x22\x15\x48\x44\xb1\xe5\x04\x29\x96\x46\x63\xda\xe6\xf9\x8e\xb9\x26\xa1\x84\x09\xb3\x69\x6f\x63\x4b\xb1\x89\x8c\x18\xca\xce\x8e\x00\x38\xfe\x04\x00\x00\xff\xff\xf8\xce\x4e\xd6\x3a\x16\x00\x00")

func compiledExtensionBinRuntimeBytes() ([]byte, error) {
	return bindataRead(
		_compiledExtensionBinRuntime,
		"compiled/Extension.bin-runtime",
	)
}

func compiledExtensionBinRuntime() (*asset, error) {
	bytes, err := compiledExtensionBinRuntimeBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "compiled/Extension.bin-runtime", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x9f, 0xa0, 0xdb, 0x77, 0x42, 0x80, 0x2b, 0x58, 0xec, 0xd9, 0xa9, 0x8d, 0x31, 0x67, 0x6b, 0xf5, 0x51, 0xe7, 0xc1, 0x6e, 0xb8, 0x61, 0x5f, 0xdd, 0xcf, 0x2d, 0x1c, 0x9f, 0xb3, 0x46, 0x42, 0x21}}
	return a, nil
}

var _compiledExtensionnativeAbi = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xd4\xd4\xc1\x4a\xc3\x40\x10\x06\xe0\x77\x99\xf3\x9e\xa2\x16\xc9\x51\xf4\xe0\x41\x10\x2b\x78\x28\x41\x26\xc9\x44\x96\x6c\x66\x97\xdd\xd9\xd8\xa5\xf4\xdd\x25\xa1\x2a\x95\x42\x23\xa2\xa6\xb7\x1c\x66\x98\x2f\xff\x4c\xb2\xda\x40\x65\x39\x08\xb2\x40\x2e\x3e\x92\x02\xcd\x2e\x4a\x80\x7c\x55\x28\x60\xec\x08\x72\x60\x14\xdd\xd3\xb3\x58\x41\xb3\x8c\xce\x99\x04\x0a\x6c\x94\x5d\xe1\xe6\xbd\x0e\x14\x48\x72\xc3\x53\xd4\x2c\xd9\xc5\x02\xb6\x85\x02\x87\x09\x4b\x43\x90\x37\x68\x02\x29\x08\x82\x42\x77\x51\xb0\xd4\x46\x4b\x82\x1c\x7a\x4d\xaf\x9f\xbd\x4d\xe4\x4a\xb4\x65\xd8\xaa\x6f\xe9\xd6\xf7\xde\xf6\x54\x3f\x59\xdf\xce\x92\x77\x65\x6c\xd5\x3e\x50\x73\x0c\x57\x26\xa1\x70\xf9\x8b\xb6\x8f\x99\x1c\xbb\xfd\x4c\xce\xb2\x71\xec\xbe\xbc\x1c\xdc\x4b\xfd\xc2\xe4\x8f\xd1\xb1\xae\x3d\x85\xf0\x17\xf6\x1a\x05\xbf\x64\x76\xd0\x8e\x2d\x65\xe5\xb0\xeb\x29\xa9\xef\xde\x7f\x3e\xb1\x3f\x8e\x9f\x5c\x65\x3d\x4d\x39\xe9\xc5\xf9\xdc\xf8\xba\x3b\x4d\xf8\xed\xf5\xff\xdf\xcb\x81\x5f\xc8\x4c\x59\x37\x6b\xa7\x3d\x8e\xad\x13\x96\xfd\x63\x5d\xf1\x16\x00\x00\xff\xff\x0a\x6a\xa9\x67\xb6\x06\x00\x00")

func compiledExtensionnativeAbiBytes() ([]byte, error) {
	return bindataRead(
		_compiledExtensionnativeAbi,
		"compiled/ExtensionNative.abi",
	)
}

func compiledExtensionnativeAbi() (*asset, error) {
	bytes, err := compiledExtensionnativeAbiBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "compiled/ExtensionNative.abi", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x27, 0xa5, 0xa7, 0x51, 0x48, 0x2a, 0x8a, 0x78, 0x88, 0x1b, 0x7c, 0x2e, 0x24, 0xdf, 0x39, 0x24, 0x54, 0x8a, 0x9f, 0xc5, 0x42, 0x93, 0xeb, 0xc0, 0x3, 0xd9, 0xf7, 0xa4, 0x9d, 0xe7, 0x47, 0x5f}}
	return a, nil
}

var _compiledExtensionnativeBinRuntime = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func compiledExtensionnativeBinRuntimeBytes() ([]byte, error) {
	return bindataRead(
		_compiledExtensionnativeBinRuntime,
		"compiled/ExtensionNative.bin-runtime",
	)
}

func compiledExtensionnativeBinRuntime() (*asset, error) {
	bytes, err := compiledExtensionnativeBinRuntimeBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "compiled/ExtensionNative.bin-runtime", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xe3, 0xb0, 0xc4, 0x42, 0x98, 0xfc, 0x1c, 0x14, 0x9a, 0xfb, 0xf4, 0xc8, 0x99, 0x6f, 0xb9, 0x24, 0x27, 0xae, 0x41, 0xe4, 0x64, 0x9b, 0x93, 0x4c, 0xa4, 0x95, 0x99, 0x1b, 0x78, 0x52, 0xb8, 0x55}}
	return a, nil
}

var _compiledMeasureAbi = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x9c\xcd\x31\x0a\xc2\x40\x10\x85\xe1\xbb\xbc\x7a\x4e\xb0\x77\xf0\x04\x21\xc5\x24\x4c\x60\x20\xce\x2e\xbb\x6f\x94\x45\xbc\xbb\x58\xd9\x58\x88\xf5\x0f\xff\xb7\x3c\xb0\xd7\x18\xd4\x20\x0a\x7b\x9a\xc0\xa3\x25\x07\xca\xb2\x0a\x42\xaf\x86\x02\x8f\xb0\x0e\x41\x4d\x7e\x5a\xd3\xa9\xdb\x69\x28\x87\x9e\xc3\x04\x83\x4a\xbb\x24\x75\xf3\xd3\x39\x51\xd0\xb2\x1b\x04\x9c\xed\x3d\x39\x32\x76\x7a\x0d\x3c\xe5\x27\xb4\x26\xff\x41\x6f\x6e\xf7\x6f\xe8\xfa\x0a\x00\x00\xff\xff\x0a\x34\xa0\xdd\xeb\x00\x00\x00")

func compiledMeasureAbiBytes() ([]byte, error) {
	return bindataRead(
		_compiledMeasureAbi,
		"compiled/Measure.abi",
	)
}

func compiledMeasureAbi() (*asset, error) {
	bytes, err := compiledMeasureAbiBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "compiled/Measure.abi", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xa6, 0xd7, 0x75, 0x5b, 0xb0, 0xe5, 0x58, 0x71, 0x89, 0xcd, 0xb5, 0x4b, 0xe0, 0x34, 0x29, 0x72, 0x6, 0x81, 0xd, 0x65, 0x27, 0xa3, 0x6f, 0x8c, 0xb3, 0x90, 0xca, 0xf2, 0x0, 0xb0, 0x4f, 0xa4}}
	return a, nil
}

var _compiledMeasureBinRuntime = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xa4\x50\x4b\x52\xc5\x30\x0c\xbb\x92\xfc\x77\x8e\x93\x8f\x73\xff\x23\x30\x6d\xfa\x78\xc0\x86\x19\x90\x17\x6d\x64\x4d\x22\xc9\x91\x70\x28\x8c\x1d\x50\x71\xba\x4e\xcd\xc2\x01\x88\xc5\x04\xe1\x8f\x68\x80\xba\xec\x07\xe4\x09\x17\xde\x4c\x4b\x47\x91\x3a\xb4\x2c\x2e\x4e\x25\xbc\xa8\xda\xc5\x39\x5b\xd8\xb8\xde\x4e\xec\x65\x43\x34\x41\xe6\xb0\xc7\xd1\x61\x0d\x7e\x4f\xb8\xb9\x0d\xe0\xad\xf3\xf5\x53\x17\xea\x88\x7c\xe9\xae\xaf\x20\x3e\x5d\xfd\x06\xf2\xb7\xe7\xbb\x25\x4a\xfa\x9a\xe9\x3f\xfd\x80\x93\x4e\xeb\xa0\xcb\xf3\x73\x3f\x52\x20\x79\x33\x19\x09\x19\x64\x27\xdb\x1a\xdf\xb3\x59\xdf\xf4\xda\x55\x59\xc8\x3a\x5b\xa9\xf3\xf7\xa8\xce\x38\xd0\xc9\xcd\x39\x7a\xf4\x60\x81\x25\x43\x8d\x87\xaf\xbd\xa9\x95\xe6\x4e\x35\xb6\x3d\x36\xd5\xe4\x39\x22\x9a\xb4\x9c\xc5\x5d\xdb\x9a\x96\x83\x22\xe7\x5c\xd4\xa6\x46\x49\xef\xa9\xa3\x00\x6e\x1f\x01\x00\x00\xff\xff\x53\xb0\x78\x12\x40\x02\x00\x00")

func compiledMeasureBinRuntimeBytes() ([]byte, error) {
	return bindataRead(
		_compiledMeasureBinRuntime,
		"compiled/Measure.bin-runtime",
	)
}

func compiledMeasureBinRuntime() (*asset, error) {
	bytes, err := compiledMeasureBinRuntimeBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "compiled/Measure.bin-runtime", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xa1, 0xb7, 0x84, 0x37, 0x61, 0xc5, 0x79, 0xb3, 0xf8, 0xbe, 0xfa, 0xab, 0xbb, 0x61, 0xe, 0xd6, 0xd8, 0x17, 0xe5, 0x56, 0xb0, 0xc3, 0xbd, 0xbb, 0xbb, 0xe8, 0x9b, 0xb0, 0xbc, 0x8, 0x31, 0xfb}}
	return a, nil
}

var _compiledParamsAbi = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xa4\x92\xc1\x6a\xc3\x30\x0c\x86\xdf\xe5\x3f\xfb\xd4\xb1\x1d\xf2\x0e\x3b\xed\x58\xc2\x50\x12\x75\x98\xa5\x72\x88\xa4\xac\xa6\xe4\xdd\xc7\x4a\x12\xc3\xe8\x08\x65\x47\xe3\xcf\xbf\x3e\xa3\xff\x78\x45\x9b\x44\x8d\xc4\x50\x9d\xa8\x57\x0e\x88\x32\xb8\x29\xaa\xe3\x15\x42\x67\x46\x85\xf7\x4f\xce\x08\xb0\x3c\xfc\x9c\x9a\x6c\xac\x4f\x07\xcc\xa1\x00\x13\xf5\xce\x05\xf1\x28\x76\x78\x7e\xc1\x5c\x87\x15\x51\x36\x04\x24\xb7\x25\xbc\x0e\x18\x28\x53\xd3\xf3\x36\x58\x8d\x8c\x5f\xdd\xa8\x89\x7d\xb4\x8c\x0a\x92\x64\x85\xb6\xec\x93\x4b\x6b\x31\xc9\x6d\x7e\x91\xb7\xd1\x1f\x71\x2f\x62\x1f\xbf\xc4\xb6\x97\xf7\xbf\xb3\x2f\x3d\x45\xfe\x7a\x54\xb7\xe8\xf0\x85\x5b\xb7\x34\xee\x39\x51\xd7\x8d\xac\xfa\x7f\x27\x92\x24\xf9\x9c\x5c\xef\x15\x20\x4a\xc7\x17\xee\x56\xdf\xc5\xe2\xcf\x3a\x6c\xf8\x92\xb4\xf0\xfb\xed\x78\xbb\x2d\x61\xb9\xe7\x89\xc5\x30\xd7\xdf\x01\x00\x00\xff\xff\xfb\x8f\x43\xc8\x9d\x02\x00\x00")

func compiledParamsAbiBytes() ([]byte, error) {
	return bindataRead(
		_compiledParamsAbi,
		"compiled/Params.abi",
	)
}

func compiledParamsAbi() (*asset, error) {
	bytes, err := compiledParamsAbiBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "compiled/Params.abi", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x32, 0xad, 0x81, 0x93, 0xe5, 0xe1, 0xaf, 0x99, 0xd, 0x93, 0x3e, 0x5d, 0x82, 0xcc, 0x16, 0x35, 0x47, 0x8, 0xb7, 0xbc, 0xf, 0x37, 0x70, 0x43, 0x3b, 0x21, 0xac, 0x9a, 0x2, 0x1e, 0xe3, 0xb6}}
	return a, nil
}

var _compiledParamsBinRuntime = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x55\x59\x76\xe4\x20\x0c\xbc\x52\x69\x17\xc7\x01\x63\xee\x7f\x84\x79\x18\xf7\x92\x4c\xa6\x13\xf7\xbc\xe0\x0f\xd3\x92\x5a\x4b\x95\x24\x3b\x12\x0e\x85\xb1\x03\x2a\x4e\x70\x02\x2c\x2c\x1c\x80\x58\x6c\x20\xbc\x79\x0a\xa0\x2e\xe3\x3c\xe4\x09\x17\x07\xba\xd4\xdd\x48\x8f\x38\x9b\xc5\x94\x66\x26\x8c\x09\x4b\x5a\x62\x49\x9b\xba\x23\x39\x96\xb4\x6f\x16\xd6\x66\x56\x89\xd1\xad\x89\x26\xc8\xa6\xc6\x73\x65\xbb\xe4\x76\x54\x50\x6c\xd6\x93\x10\x87\x24\x81\x0a\x12\x09\x99\x52\x50\x21\x2f\x70\xf0\xbc\xa2\x70\x39\xb4\x62\x9f\x65\x76\x3c\x4e\x20\x11\x73\x6b\xc0\x73\xd4\x2a\x7f\x47\xdd\xfc\x5a\xd4\x7b\x04\x6e\x3a\x23\x1c\x4c\x50\x22\x39\x69\x32\x72\xd8\xd2\x61\x73\x6a\x0a\x41\x0a\x86\x3c\x67\xb2\x7f\x51\xff\x20\x27\x88\x8f\x8f\x5e\xe3\xce\xc6\x77\x87\xfc\x8a\xed\xf7\xd9\x1e\x28\xb6\x47\x4e\x57\xbc\x8b\x5c\xb1\x26\x25\x3b\x70\xa1\xde\x27\x2e\x33\x93\x18\x5b\x40\xb6\x46\xfc\x6e\x2f\xaf\x0a\xa1\x98\x38\x9e\x2c\x4e\x96\x20\xc9\x53\x43\xf5\x81\x41\x22\x86\x73\x98\x17\xdf\x42\xbd\xf8\x2e\x95\xe1\x16\xe9\xe6\x12\x16\xea\x23\x98\x11\xec\x16\x34\xed\xe6\xcd\xf5\x73\x3c\xc3\x0b\x4c\xe7\x04\xe0\x0a\x2e\x2e\xe6\x05\xe2\xd9\x52\x52\x4e\x6f\xf2\x3c\x9f\xff\x33\xeb\xe0\x0f\x08\xc9\xad\xe3\x6f\xef\x27\x74\x9e\x7b\x9b\xcf\x09\x00\xee\xf5\xa5\xcc\xd9\x39\xfa\x39\x12\xd2\xc8\xce\x3e\xe7\xb9\x2d\x9e\xfb\xdc\xea\xa0\x87\x36\x60\x21\x7d\xe9\x65\x5f\xb7\xd3\xee\x78\x96\xcf\x99\x4b\x0c\x1d\x6d\x30\x85\x7b\x21\xcb\xee\xae\x69\xdc\xd3\x5a\x63\x1e\x4d\x49\x51\x47\x57\x2b\xb9\x91\xef\x55\xbd\xab\x52\x65\xdb\x78\x54\x05\x27\xf7\xe4\x9f\x4e\x6a\x5d\x15\xfa\xda\x5c\x57\x19\x8b\xb6\xb7\x3e\x40\x77\xbe\xf8\x97\xf8\xe2\x7f\xf3\x75\xab\x8a\xbf\x67\x48\xb8\xbf\x60\x48\x94\x5e\x33\xb4\xfc\x4f\x39\x23\x89\xce\x7f\xdd\xbe\x45\xcb\xe7\x63\xab\x1a\x7d\xbd\x4d\xe7\xfb\xfc\xf5\x26\xea\x85\x99\xab\x35\x3a\xeb\xa5\xdf\xc0\xfc\x67\x78\x76\x7b\x85\xe7\x5e\xde\xc1\x73\x8c\x37\xf0\xc4\xfc\x84\x55\x72\x73\x8e\x1a\x35\x58\x60\x39\xbd\x06\x77\xd0\x6e\xd4\x5a\xcd\x2c\x81\x6e\xbd\x97\xd4\x16\xa5\x36\x26\xdb\xb4\x6d\x04\xdd\x98\x03\x2a\x61\xba\x71\x71\x69\x36\x52\xbb\x6b\x00\x5c\xfe\x04\x00\x00\xff\xff\xaa\x9c\x0b\xea\x82\x08\x00\x00")

func compiledParamsBinRuntimeBytes() ([]byte, error) {
	return bindataRead(
		_compiledParamsBinRuntime,
		"compiled/Params.bin-runtime",
	)
}

func compiledParamsBinRuntime() (*asset, error) {
	bytes, err := compiledParamsBinRuntimeBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "compiled/Params.bin-runtime", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x21, 0x34, 0x31, 0x53, 0x4b, 0x93, 0xd2, 0x46, 0x2c, 0x89, 0x74, 0xff, 0x98, 0x9b, 0x89, 0x25, 0x31, 0x3, 0x58, 0x22, 0xe3, 0x15, 0xcb, 0x73, 0xd9, 0xd, 0x8e, 0x29, 0x82, 0xd2, 0xb5, 0xa9}}
	return a, nil
}

var _compiledParamsnativeAbi = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xa4\xcf\xd1\x4a\xc4\x30\x10\x05\xd0\x7f\x99\xe7\x3c\xad\xe8\x43\xff\xc1\x2f\x58\x8a\x4c\xbb\xb3\x12\x8c\x93\xd2\xb9\x53\x0d\xcb\xfe\xbb\x54\x6c\x0a\x56\x28\xc5\xc7\x90\x3b\xdc\x73\xcf\x37\xea\xb3\x1a\x58\x41\xcd\x95\x93\x49\xa0\xa8\x83\xc3\xa8\x39\xdf\x48\xf9\x5d\xa8\xa1\x37\x29\x14\x08\x65\x98\x1f\x5d\x81\xd8\xc3\x89\xee\xa1\xfe\x4f\x9c\x5c\xd6\x84\x47\xc5\xe9\xf1\x89\xee\x6d\x58\x12\xca\x88\x93\xbc\x98\x80\x02\x65\xc7\x4f\x43\x1b\x68\xe0\xc2\x5d\x92\xda\x6e\x60\xc8\xb3\x83\xbb\x98\x22\xca\x7c\x9b\x75\x09\xd5\x8a\xab\x6b\x8f\x98\xf5\x5b\xb1\x2e\xc0\xe8\x07\x06\x6c\x78\xaf\xbf\x78\xf5\xfe\xef\x6d\xfb\xf4\x29\xca\xc7\x51\xf4\x46\x25\x9f\xd2\x3b\xf2\xb8\x47\xe3\xcb\x65\x14\xb3\x7f\xd2\xda\xaf\x00\x00\x00\xff\xff\xa0\x26\x35\x57\x13\x02\x00\x00")

func compiledParamsnativeAbiBytes() ([]byte, error) {
	return bindataRead(
		_compiledParamsnativeAbi,
		"compiled/ParamsNative.abi",
	)
}

func compiledParamsnativeAbi() (*asset, error) {
	bytes, err := compiledParamsnativeAbiBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "compiled/ParamsNative.abi", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xcc, 0xe8, 0xf4, 0xd6, 0xdb, 0xc5, 0x8, 0x50, 0x55, 0x64, 0xca, 0x28, 0x58, 0xa6, 0xd4, 0xaa, 0x36, 0xa3, 0x66, 0x30, 0xe3, 0x46, 0xb0, 0x1, 0x4e, 0x77, 0xbd, 0x7, 0x7, 0xa3, 0x3, 0x73}}
	return a, nil
}

var _compiledParamsnativeBinRuntime = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func compiledParamsnativeBinRuntimeBytes() ([]byte, error) {
	return bindataRead(
		_compiledParamsnativeBinRuntime,
		"compiled/ParamsNative.bin-runtime",
	)
}

func compiledParamsnativeBinRuntime() (*asset, error) {
	bytes, err := compiledParamsnativeBinRuntimeBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "compiled/ParamsNative.bin-runtime", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xe3, 0xb0, 0xc4, 0x42, 0x98, 0xfc, 0x1c, 0x14, 0x9a, 0xfb, 0xf4, 0xc8, 0x99, 0x6f, 0xb9, 0x24, 0x27, 0xae, 0x41, 0xe4, 0x64, 0x9b, 0x93, 0x4c, 0xa4, 0x95, 0x99, 0x1b, 0x78, 0x52, 0xb8, 0x55}}
	return a, nil
}

var _compiledPrototypeAbi = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xd4\x56\x4d\x8b\xe2\x40\x10\xfd\x2f\x7d\xce\xc9\x65\xf7\x90\xab\xb0\x37\x97\x65\x97\x3d\x89\x48\x25\x29\xdd\xc6\x4e\x75\xe8\xaa\x56\x82\xcc\x7f\x1f\xfc\x08\xdd\x8c\xc1\x64\xd4\x8c\xf1\x28\xbe\x0a\xef\xd5\xab\xaa\xd7\xf3\xbd\xca\x2d\xb1\x00\x89\x4a\xc5\x79\x4c\x94\xa6\xca\x0b\xab\x74\xbe\x57\x04\x25\xaa\x54\x2d\x19\xcd\x4a\x25\x4a\xea\xea\xf0\x13\x8a\xc2\x21\xb3\x7a\x4b\x02\xc2\x33\xba\x16\xc4\x22\x69\x10\x9a\xff\x9d\x20\xd6\xcb\xc7\xef\x87\xc2\xcc\x5a\x73\xac\xaa\xa0\x86\xcc\xa0\x4a\x57\x60\x18\x13\xc5\x02\x82\x33\x2f\x90\x69\xa3\xa5\x56\xa9\xda\x6a\xdc\x85\xc2\x95\xa7\x5c\xb4\xa5\x23\xa9\xdb\x15\x05\xbe\xb9\xc3\x42\xcb\x6f\x03\xd4\xce\xf9\xf4\x7f\xf8\x84\xd7\x24\x93\xef\x3f\xe2\xa6\x38\xcc\xed\x16\x5d\xfd\x07\x04\x5b\x80\x8f\x53\x79\xae\x1e\xc6\x38\x28\x8a\x0b\xe7\x7a\x51\x27\x4b\x0d\x68\x38\x9b\xfe\x03\x4f\x6d\x81\x63\x9f\xab\xa8\xe1\x1b\xac\x23\x5e\xb5\x20\x7f\x9b\xc4\x8a\x58\xac\x83\x35\xfe\xb4\xdd\xcb\x12\x15\x3f\x7d\x5f\x4a\x60\xe9\xde\xef\xb8\xf0\x59\xc3\x1f\x38\x7b\xe2\xca\x12\xdb\x71\x0d\xf7\x67\x96\xf3\x00\x98\x36\x97\xe8\x6a\xe7\x07\x38\x3b\x77\x08\x0b\x7d\xbf\x96\x18\x7f\x5b\xdc\x19\xe1\x72\x47\xa1\xe1\x9d\x43\x92\x9e\xbc\x07\x58\x86\x3b\x2c\xc9\x8c\xcd\x37\xbf\x7c\x99\xc5\x23\x17\x4f\xcd\x19\x98\x81\x01\xca\x3b\x2f\xee\xab\xc5\x9c\xc3\xd2\x6e\x71\x74\x49\x77\x83\x41\x48\xe8\xd6\xf5\x2b\xf8\x13\x85\xde\x17\xdc\xe1\x7b\xc6\x87\x70\x37\x6b\x02\xee\x8a\x0a\x94\xd9\x65\x0c\x8e\x49\x47\x9f\xbb\xcb\x68\x30\x6f\xbd\x61\x63\x52\xd2\xe3\xfd\xbd\xec\x7e\x80\x07\xe3\xa6\xed\xef\xfd\x07\x48\x5e\xbc\x07\x00\x00\xff\xff\xda\x2d\x03\xb6\x64\x0d\x00\x00")

func compiledPrototypeAbiBytes() ([]byte, error) {
	return bindataRead(
		_compiledPrototypeAbi,
		"compiled/Prototype.abi",
	)
}

func compiledPrototypeAbi() (*asset, error) {
	bytes, err := compiledPrototypeAbiBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "compiled/Prototype.abi", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x4e, 0xaa, 0xdc, 0xba, 0x76, 0xdf, 0xaf, 0x81, 0x3d, 0x2e, 0xdd, 0x4c, 0xdf, 0x3b, 0x86, 0xf7, 0xd5, 0x3d, 0xec, 0xe1, 0xcf, 0x78, 0x4a, 0x3f, 0x68, 0x67, 0x17, 0x13, 0x33, 0x53, 0x7b, 0x64}}
	return a, nil
}

var _compiledPrototypeBinRuntime = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x5b\x0b\x92\xe2\x3a\x0c\xbc\x92\x64\x7d\x7d\x1c\x7f\xe2\xfb\x1f\xe1\x95\x93\xcc\x00\x9b\x9d\x10\x87\x07\x45\xcd\x02\xb5\xc5\x22\x62\x2c\xb9\x5b\x2d\xd9\x61\x14\x1c\x14\x18\x24\x28\x00\x93\x22\x28\x02\x34\x14\x53\x00\x20\xb1\x02\x08\x27\x1f\x11\x80\x95\xda\xfa\x40\x75\x50\x82\x90\xa1\x16\xc8\xc8\xf3\x3c\x2a\xd6\xad\x08\x2d\x0a\x44\x9a\xad\x68\xb8\x5a\xa9\x52\x4a\x25\x2c\xd6\xd2\x56\xeb\xd4\x22\x27\xc5\xd9\x1a\x28\x2c\x56\x0a\xc9\x23\x24\x5b\xac\x5e\x57\x6b\x4d\x89\x33\xc3\x62\x6d\x69\xb1\x2a\x42\x0d\x0e\x3e\x5b\xc9\xea\x97\x35\x7b\xca\xa1\x2e\xd6\x02\xab\xd5\x4b\x9c\x00\x74\xb6\x32\xd9\x62\x35\x30\xf1\x4a\xcb\x6c\x9c\x57\x1f\x0c\x0d\xa7\x1a\x96\x6b\x85\x64\xb5\x72\xaa\x31\x85\xc5\x5f\x89\x6b\xc4\xd1\x91\x49\x90\x17\x6b\x8b\x8b\x35\x65\x9e\x62\xa4\x36\x5b\x55\x56\x7f\x73\xab\x2d\x53\x92\xc5\x1a\x57\x7f\x8b\x38\x51\xc9\xcb\xb5\x06\xab\xbf\x2d\x73\x0a\x18\x97\x88\x4d\x49\x4c\x72\x47\xd2\xa1\x55\xc9\xc4\x0e\x28\x7d\x35\x21\x2c\x08\x2f\x76\xe9\xa8\x2f\x98\xb3\x03\x29\x90\x23\x60\x04\x07\xef\x1c\xf8\xc6\xf0\xde\x03\x35\x82\x42\x80\x3e\x36\x86\x38\x7f\xc3\x63\xe3\x65\x7e\xf6\x58\x72\x12\xed\xb1\x30\x08\x3a\x78\x40\x59\x9e\x8e\x9d\xbb\xf3\x18\x9c\xaf\x5d\xaf\x88\x08\x14\xa1\xd1\x75\xd4\x1d\xeb\x3f\xa3\xce\xe1\xff\x8f\xfa\xdb\x6b\x2f\xd3\x8d\xd7\x74\xf1\xd6\xc3\x95\xe7\x61\x1d\xb1\xe3\x7b\xcd\x1b\xdf\x03\xc1\x1b\x23\x16\x73\xec\xb1\x03\x5c\x45\x11\x68\xda\x46\x61\xf4\x44\x04\x72\xa5\x87\x79\x13\x62\xdc\x7a\x5d\xcb\x73\xd6\xbe\xcf\x83\x71\x27\xa2\x92\xc3\x6d\x44\x5f\x23\xbe\x5e\x07\x22\x23\xd0\x4d\x64\x44\xf9\x89\x78\xd4\xf4\x87\xf7\x23\xdf\x3a\x72\xed\xc8\x2a\xf8\x16\x5f\xca\xd3\x13\x57\x61\x72\xdc\xe4\x06\x95\xb2\xf1\x82\x03\xbe\x6f\x86\x23\xc0\x1f\x58\x0e\xac\x39\x33\x6d\xa3\x8d\xfe\xc6\xd1\x22\xea\xc3\x4a\xc2\x79\xab\x7f\xdc\x9e\xa8\x7f\x18\x42\x7a\xbb\x7c\x13\xc6\xcd\x2a\x88\x3f\xa9\x96\xfd\xb8\x32\x04\xf1\x34\x7b\x25\x6d\xfb\x27\x69\x6f\xdc\x3f\x21\xb5\xba\x51\x1c\x05\xd9\x44\xa1\xcc\x2f\xc6\x41\xdc\x4f\xe3\xa0\xba\xad\x5f\x1a\x9f\x58\xbf\x50\xad\x6c\xd7\x31\x6d\xeb\x87\xb6\x27\xd4\x8f\xff\x2d\x0a\xfb\x0b\x1b\x0c\xb6\xf5\xc7\xf4\x9d\xeb\x8f\xb7\x6d\x15\x35\x6d\xdb\x28\xf2\x93\xea\xca\x10\xcf\xd3\x85\x39\xf3\xde\x1a\x46\x66\x57\x8a\xc5\x05\x52\xca\xce\xce\x6b\x46\xd0\xf5\xee\xfa\x91\x9d\x3a\xac\x39\x07\x0c\xf3\x2e\xe5\xf9\x35\xe2\x25\x75\xe8\x7b\x57\x15\xe0\xb2\x03\xeb\x0c\x98\xf9\x61\x0e\x94\x51\x56\xde\xb8\xff\xb1\xbf\x92\xd4\xf0\xf2\x69\x6c\x62\x54\x97\xcf\x69\x5a\xfe\xb7\x5e\x77\xb5\x73\xeb\xf6\x00\x8e\xb8\x8e\xca\x37\xfa\x7a\x61\x9e\xe0\xdf\x59\xd2\x5f\xfb\xfb\xf9\x9d\x7e\xed\xdc\x47\x99\x52\x42\x6c\xc4\xc1\xbe\x79\x12\x9e\xc4\x93\x97\xf6\x12\xbe\x8f\x5f\xd4\x3d\xfc\xa2\x1d\xc6\x8f\x2f\xf8\xc5\x78\x18\xbf\x1d\x4c\xf1\xe6\xdf\x17\xaa\x38\xb2\x1e\xc8\x4b\xa7\xa9\x08\x89\xbd\xfb\xd4\xbd\xb5\x56\x0c\xa8\x64\x0c\x67\xe1\xbc\x41\x13\x2e\xe7\x12\x40\x1e\xfa\x27\xd7\xbd\xad\x83\x35\x0d\x26\x1a\xb5\x18\x6b\xd4\x89\x52\x80\xfe\x6a\xaa\xa8\x45\xa3\x72\x00\x13\x23\x15\xfb\xc1\xa3\xfe\x6d\x02\x3b\xb5\xbd\x4a\xee\x31\xce\x9c\x45\xcc\x3c\x57\xa9\x51\xfe\x8b\xe7\xd4\x1a\x05\x27\xa7\x8f\x52\x1e\x99\x63\x48\x29\x73\x80\x9d\x4c\xcb\xc4\x27\x94\x32\x73\x1a\x53\xca\x35\x1b\x72\x69\x2f\xcc\x06\xbd\x9b\x0d\xa8\xc5\x82\x8a\xa2\xb2\xc5\xf9\x3d\x2b\xab\x28\x9f\xcd\x86\xeb\x4a\x30\x9a\x07\x1a\x7d\x72\xb5\xf6\x9d\x05\xbf\xa0\x0e\x1c\xe0\x67\xb1\x3d\x7e\x16\x3f\xc3\xcf\x12\x07\xf9\x39\x57\xf2\xe5\xdd\x49\xf4\x5a\x94\x96\x02\xd0\x6f\xe9\xf7\x76\x4e\x29\x47\xd4\xa7\x4a\xdb\x41\xb7\x1a\x9d\x40\xb7\xde\x9e\xff\x9d\xeb\xd3\x46\xf1\x25\x0c\x53\xe0\xc9\xff\xb1\xec\x9c\x68\x0f\xbf\x49\xce\xe0\x37\xe9\x19\xfc\xbe\xb3\x73\x38\x33\xa1\x96\xd8\x84\x3d\xd0\xa7\xbf\x38\x34\xc7\x50\x86\x37\xd9\xd3\xef\xa6\x67\xf4\xbb\xd9\xb9\xfe\xa2\xb5\xf7\xea\x2f\x26\x6d\xd6\xbb\x6c\x32\xd0\xa6\x93\x91\xb6\xb9\xdf\x78\xa4\xbf\x38\xa9\x5f\xcc\x36\x99\xc5\xf6\x5b\xea\xd3\x7b\x65\x01\x42\xa5\x9f\xb3\x00\x61\xb2\xf1\x2c\xc0\x7e\xc5\xcb\xeb\x9c\x17\xcf\x2e\xa9\x7c\x78\x72\x74\x8e\x21\x9e\x60\x67\xc2\x8f\x3c\xc1\x96\x4f\xf0\x24\x20\xbe\x9e\x27\x11\x7d\x52\x85\xfa\x6f\xf5\x43\x18\xca\x1e\x7e\xa1\x9e\xc2\xaf\x9d\xc1\xef\xa1\xdd\x4a\x09\x14\x93\xb4\xf0\x5b\xb2\xfc\xda\xf7\x9b\xdf\xb0\x9d\xcb\x52\xca\x69\x07\x65\x2a\xd3\x09\x94\x69\xe2\x07\xb3\x14\x91\x41\x1f\x39\x69\xcb\x4d\xd5\x62\x2b\x9f\x93\xb6\xa3\x73\x0c\xb1\x86\xab\xec\xb0\x86\xa7\x78\x82\x35\xdc\xda\x99\x4e\x18\xc5\xf9\x85\x9d\x30\x1d\xed\x84\x15\xef\x9d\x39\xc3\x0b\x4e\xda\x12\x24\x4a\x15\xd3\x47\xfd\xfe\xca\x63\xa5\xb8\xc3\x63\xe5\x7a\x82\xc7\xaa\xf4\x98\xfa\x0d\x9f\xd7\x84\x00\x53\x13\xfb\xec\xfa\x8f\xce\x31\xc4\x11\xe3\x9d\xfb\x77\x68\x72\xe2\xfe\x2b\x9a\x0d\xde\x7f\x5d\xb5\xce\x5a\x7a\xa1\xd6\xa5\xd1\xbb\x0a\xfb\xbb\xff\x81\x5d\x3f\xa2\x3f\x56\xff\xdd\x3d\x69\xb6\xfa\xa9\xff\x47\xe7\xb8\xe4\x04\xdc\xcf\x09\xdf\xad\xff\x7e\xaf\xfe\x5f\xf5\x79\xde\xd2\x23\x38\xa3\xa4\x92\xcc\x3f\x7d\xde\xe1\x39\x86\xb4\x2f\x96\xbd\xfa\x18\xeb\x99\xfa\x18\xdb\x60\x7d\x5c\xb5\x2f\xd9\x2b\x7f\x5f\x70\xf8\xc4\x73\xee\xf3\x6e\x74\xef\xa7\xf9\x0e\xf7\x79\x88\xc9\xc5\xe9\x7c\x56\x80\x68\x8a\xc5\xe7\xae\xef\xbb\xef\xe3\x27\xe5\x05\xbf\x20\x2f\x7e\xfa\xeb\x14\xba\x30\xed\x80\x6a\x65\xda\x39\xbf\xc7\xcc\x77\xce\xef\x2f\xba\x45\x43\x5a\x30\xfa\x8b\x1a\x07\x45\x2c\x6e\x62\x02\x63\x33\x7d\xee\xf4\x1d\x52\xb5\x42\xbc\xc3\x83\xc2\x7e\x42\xd5\x8a\x4c\x63\xaa\x36\xc6\x09\xc9\xab\x0a\x96\x96\x5f\xa7\x82\x01\xee\xa9\x60\xdf\xdf\x6a\x51\x0d\xd0\x95\x2f\x80\x56\x45\x23\xe3\xbe\xeb\x0d\xd0\x7b\x40\xc3\x3e\x66\xe9\x06\x8f\x76\x80\x00\x09\x55\x34\x58\xb2\x64\x81\x40\x3c\x40\x8d\x25\xb7\x90\x28\x40\x2d\x02\x53\xa9\x02\x90\x29\x24\x33\x56\x8f\x5c\xd8\xcb\x44\xac\x06\xc9\x7b\x6f\xa2\xcd\xa7\xd8\x10\x53\x9e\x94\x82\x36\x03\x08\xf1\xbf\x00\x00\x00\xff\xff\x9e\x62\x96\x1b\x54\x3a\x00\x00")

func compiledPrototypeBinRuntimeBytes() ([]byte, error) {
	return bindataRead(
		_compiledPrototypeBinRuntime,
		"compiled/Prototype.bin-runtime",
	)
}

func compiledPrototypeBinRuntime() (*asset, error) {
	bytes, err := compiledPrototypeBinRuntimeBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "compiled/Prototype.bin-runtime", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xa0, 0xd2, 0xf1, 0x22, 0x84, 0xaa, 0x63, 0xb, 0x38, 0xad, 0xd3, 0x9a, 0xc, 0x60, 0x7c, 0x56, 0xb3, 0xf5, 0xac, 0x3c, 0x9c, 0xe3, 0xea, 0x48, 0x6b, 0x15, 0x75, 0x49, 0x76, 0xf4, 0x2b, 0xf9}}
	return a, nil
}

var _compiledPrototypeeventAbi = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x90\x3f\x6b\x84\x40\x10\xc5\xbf\xcb\x90\xd2\xca\x90\x14\xb6\xa9\x03\x21\x21\x95\x58\xcc\xb9\x73\xb0\xa0\xb3\xb2\x33\xeb\xdd\x22\x7e\xf7\xe3\xe4\xf0\x1f\xda\x78\xd7\xee\xce\xfb\xbd\x1f\x2f\xef\x00\xd9\x71\xac\x5d\x10\xc8\xce\x58\x09\x25\x60\xb9\x09\x2a\x90\xe5\x1d\x58\x36\x74\x25\x33\x7e\x31\xd6\x04\x19\x30\x5d\xbe\x51\x94\x3c\x24\xa0\xb1\xb9\x3f\xa1\x31\x9e\x44\xa0\x2f\xc6\xab\xb7\xf5\x0d\xb5\xc4\x0a\x7d\x72\xac\xb4\xf4\x64\xac\x4e\xb4\x60\x59\xd3\x8f\xcf\x81\xb7\x13\xf1\x54\xba\x96\x7c\xfc\x45\xa5\x8d\xe0\x4c\xf5\x6b\x80\xff\x54\xc8\xc7\x75\xd5\x87\xa9\x3a\xc8\xe6\x3a\xfb\xae\x58\xaa\x75\xb3\xf6\x53\x54\x92\xf7\x74\x61\xf9\x2f\xcf\xcc\xb9\xf0\x93\xc6\xb1\xb8\xd7\x2b\xfe\xad\xb9\x0f\xcb\xe2\x16\x00\x00\xff\xff\xa4\xcf\xdd\xbb\x6b\x02\x00\x00")

func compiledPrototypeeventAbiBytes() ([]byte, error) {
	return bindataRead(
		_compiledPrototypeeventAbi,
		"compiled/PrototypeEvent.abi",
	)
}

func compiledPrototypeeventAbi() (*asset, error) {
	bytes, err := compiledPrototypeeventAbiBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "compiled/PrototypeEvent.abi", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xe1, 0x27, 0xc, 0x9e, 0xae, 0x65, 0x8e, 0x5f, 0x4c, 0x27, 0x1, 0x2d, 0xb, 0xb7, 0x7e, 0xa1, 0x36, 0xa0, 0xb3, 0x84, 0x89, 0x59, 0x37, 0xa9, 0x64, 0xe0, 0x12, 0x5, 0xed, 0x9c, 0x2e, 0x9c}}
	return a, nil
}

var _compiledPrototypeeventBinRuntime = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x04\xc0\x09\x01\xc0\x30\x08\x03\x40\x4b\x21\x94\x4f\x0e\x2b\xc5\xbf\x84\x9d\x23\xe1\x38\x30\x3a\x80\xc4\x0e\xd0\xe2\xe6\x8c\x8e\x0e\x2a\x2c\x09\xe3\xca\x2d\xe9\xb2\x23\x2c\x96\x6b\xee\xa7\x12\x75\x87\xbd\x9b\x99\xb1\xf2\x88\x32\x3d\xd4\x14\x3f\xfa\xbe\x71\xd1\xcb\x1a\xbd\x03\xb0\xfe\x00\x00\x00\xff\xff\x60\xcd\x79\x97\x6a\x00\x00\x00")

func compiledPrototypeeventBinRuntimeBytes() ([]byte, error) {
	return bindataRead(
		_compiledPrototypeeventBinRuntime,
		"compiled/PrototypeEvent.bin-runtime",
	)
}

func compiledPrototypeeventBinRuntime() (*asset, error) {
	bytes, err := compiledPrototypeeventBinRuntimeBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "compiled/PrototypeEvent.bin-runtime", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xb4, 0x83, 0x1c, 0xf0, 0x5, 0xfc, 0xe6, 0xe, 0x54, 0x80, 0xe1, 0xb, 0xf3, 0xf7, 0xd4, 0x88, 0xac, 0x1e, 0x13, 0x28, 0x21, 0x7f, 0xd2, 0x6e, 0xc7, 0xa4, 0x8, 0x74, 0x22, 0xb1, 0x48, 0x1c}}
	return a, nil
}

var _compiledPrototypenativeAbi = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xdc\x96\x4f\x8b\xe2\x40\x10\xc5\xbf\x4b\x9f\x73\x72\xd9\x3d\x78\xdb\x15\xf6\xe6\xb2\xec\x32\x27\x91\xa1\xd2\x29\x9d\xc6\x4e\x75\xe8\xaa\x8e\x04\x99\xef\x3e\x44\x26\x7f\xc0\xa0\x51\x13\x8c\x73\x14\x5e\x97\xef\xc7\xeb\x7a\xe9\xd5\x41\x69\x47\x2c\x40\xa2\xe6\x1b\xb0\x8c\x91\x32\x94\x05\x61\x35\x5f\x1d\x14\x41\x8a\x6a\xae\x18\xed\x46\x45\x4a\x8a\xac\xfc\x05\x49\xe2\x91\x59\xbd\x47\xb5\x40\x7b\x4c\x8c\x34\x92\x60\x48\x66\xdf\x7f\xb4\x25\x1e\xb5\xcb\xd1\x17\xff\x40\xb0\x43\xb8\x8e\x2a\x21\x81\x98\x1c\x5f\x19\x65\x71\x9c\xfa\xd7\x02\xa9\x48\xb9\x20\x9f\xb6\xd6\x91\xca\xa0\x80\xd8\x62\x6d\x99\x05\x04\x97\x41\x20\x36\xd6\x48\x51\x4e\x71\x54\x89\xea\x3f\xdb\x04\xd2\x62\x1c\x1d\x6d\x0d\x81\xcd\x99\x23\x76\xbe\x43\xd3\x81\x63\x51\xcb\xff\xfa\x40\x83\x53\x4f\x6b\xc6\xc4\xce\xd9\xe3\x8c\x41\x39\xc5\x87\x6b\x30\x4f\x10\x52\x60\xc1\x8b\xde\xdb\xe7\x2f\xdb\xcf\x0d\xee\x27\x12\xd0\x13\x45\xd3\x00\x06\xc6\x5e\x74\xa5\x6e\x51\x2d\xe9\x59\xc0\xf6\x46\x3e\x3c\xbf\xbe\x78\x90\x24\x2f\x7c\xf9\x6e\x4e\x22\xbc\x13\xf3\x6f\xc0\x0b\x97\xe0\x80\xe6\x47\x4e\x85\x70\xbf\xac\xba\xa0\x47\xf1\xc9\xf2\xb4\x38\x26\xb3\x40\x57\x34\x84\xe1\xe1\xeb\xbb\x57\x52\xf7\x5e\x30\x1d\xbc\x47\xea\xfb\xf1\x19\xa1\xc0\x47\xaf\x37\xc3\x03\xaf\xff\xb8\x58\xb1\x75\x7a\xf7\x27\xa4\x71\x9b\xae\x2c\xde\x6f\xb3\x0e\x38\x24\xf4\xdb\xe2\xa7\xfc\x2a\x4f\x7d\xc9\xfa\xf6\x98\xba\x1c\x9f\xa6\xc1\x6f\x0d\x32\x06\x0b\xa4\xf1\x71\x49\xde\x5d\x24\xdd\x0f\xf2\x73\xe6\xa3\xa9\xdf\xd1\x2b\x3e\x00\x81\x9e\xf3\x91\xb8\xc3\xa2\xe5\xad\x10\xe4\xce\xeb\xc9\xe2\x3c\x6c\xf1\x77\x0f\xbe\xd6\x8c\xdb\x03\x5c\x7f\x04\x00\x00\xff\xff\x0e\x3d\x47\x24\x7d\x0e\x00\x00")

func compiledPrototypenativeAbiBytes() ([]byte, error) {
	return bindataRead(
		_compiledPrototypenativeAbi,
		"compiled/PrototypeNative.abi",
	)
}

func compiledPrototypenativeAbi() (*asset, error) {
	bytes, err := compiledPrototypenativeAbiBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "compiled/PrototypeNative.abi", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xa6, 0xa7, 0x8c, 0xfa, 0x59, 0x79, 0xbe, 0x2b, 0x1c, 0x5d, 0x2e, 0x73, 0x83, 0x8e, 0xda, 0x7f, 0xa1, 0x60, 0x7, 0x13, 0x5d, 0x8b, 0x54, 0x33, 0x2d, 0x84, 0x1b, 0x4e, 0x8c, 0xa3, 0x40, 0xfe}}
	return a, nil
}

var _compiledPrototypenativeBinRuntime = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func compiledPrototypenativeBinRuntimeBytes() ([]byte, error) {
	return bindataRead(
		_compiledPrototypenativeBinRuntime,
		"compiled/PrototypeNative.bin-runtime",
	)
}

func compiledPrototypenativeBinRuntime() (*asset, error) {
	bytes, err := compiledPrototypenativeBinRuntimeBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "compiled/PrototypeNative.bin-runtime", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xe3, 0xb0, 0xc4, 0x42, 0x98, 0xfc, 0x1c, 0x14, 0x9a, 0xfb, 0xf4, 0xc8, 0x99, 0x6f, 0xb9, 0x24, 0x27, 0xae, 0x41, 0xe4, 0x64, 0x9b, 0x93, 0x4c, 0xa4, 0x95, 0x99, 0x1b, 0x78, 0x52, 0xb8, 0x55}}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetString returns the asset contents as a string (instead of a []byte).
func AssetString(name string) (string, error) {
	data, err := Asset(name)
	return string(data), err
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// MustAssetString is like AssetString but panics when Asset would return an
// error. It simplifies safe initialization of global variables.
func MustAssetString(name string) string {
	return string(MustAsset(name))
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetDigest returns the digest of the file with the given name. It returns an
// error if the asset could not be found or the digest could not be loaded.
func AssetDigest(name string) ([sha256.Size]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s can't read by error: %v", name, err)
		}
		return a.digest, nil
	}
	return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s not found", name)
}

// Digests returns a map of all known files and their checksums.
func Digests() (map[string][sha256.Size]byte, error) {
	mp := make(map[string][sha256.Size]byte, len(_bindata))
	for name := range _bindata {
		a, err := _bindata[name]()
		if err != nil {
			return nil, err
		}
		mp[name] = a.digest
	}
	return mp, nil
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"compiled/Authority.abi": compiledAuthorityAbi,

	"compiled/Authority.bin-runtime": compiledAuthorityBinRuntime,

	"compiled/AuthorityNative.abi": compiledAuthoritynativeAbi,

	"compiled/AuthorityNative.bin-runtime": compiledAuthoritynativeBinRuntime,

	"compiled/Energy.abi": compiledEnergyAbi,

	"compiled/Energy.bin-runtime": compiledEnergyBinRuntime,

	"compiled/EnergyNative.abi": compiledEnergynativeAbi,

	"compiled/EnergyNative.bin-runtime": compiledEnergynativeBinRuntime,

	"compiled/Executor.abi": compiledExecutorAbi,

	"compiled/Executor.bin-runtime": compiledExecutorBinRuntime,

	"compiled/Extension.abi": compiledExtensionAbi,

	"compiled/Extension.bin-runtime": compiledExtensionBinRuntime,

	"compiled/ExtensionNative.abi": compiledExtensionnativeAbi,

	"compiled/ExtensionNative.bin-runtime": compiledExtensionnativeBinRuntime,

	"compiled/Measure.abi": compiledMeasureAbi,

	"compiled/Measure.bin-runtime": compiledMeasureBinRuntime,

	"compiled/Params.abi": compiledParamsAbi,

	"compiled/Params.bin-runtime": compiledParamsBinRuntime,

	"compiled/ParamsNative.abi": compiledParamsnativeAbi,

	"compiled/ParamsNative.bin-runtime": compiledParamsnativeBinRuntime,

	"compiled/Prototype.abi": compiledPrototypeAbi,

	"compiled/Prototype.bin-runtime": compiledPrototypeBinRuntime,

	"compiled/PrototypeEvent.abi": compiledPrototypeeventAbi,

	"compiled/PrototypeEvent.bin-runtime": compiledPrototypeeventBinRuntime,

	"compiled/PrototypeNative.abi": compiledPrototypenativeAbi,

	"compiled/PrototypeNative.bin-runtime": compiledPrototypenativeBinRuntime,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"},
// AssetDir("data/img") would return []string{"a.png", "b.png"},
// AssetDir("foo.txt") and AssetDir("notexist") would return an error, and
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"compiled": &bintree{nil, map[string]*bintree{
		"Authority.abi":               &bintree{compiledAuthorityAbi, map[string]*bintree{}},
		"Authority.bin-runtime":       &bintree{compiledAuthorityBinRuntime, map[string]*bintree{}},
		"AuthorityNative.abi":         &bintree{compiledAuthoritynativeAbi, map[string]*bintree{}},
		"AuthorityNative.bin-runtime": &bintree{compiledAuthoritynativeBinRuntime, map[string]*bintree{}},
		"Energy.abi":                  &bintree{compiledEnergyAbi, map[string]*bintree{}},
		"Energy.bin-runtime":          &bintree{compiledEnergyBinRuntime, map[string]*bintree{}},
		"EnergyNative.abi":            &bintree{compiledEnergynativeAbi, map[string]*bintree{}},
		"EnergyNative.bin-runtime":    &bintree{compiledEnergynativeBinRuntime, map[string]*bintree{}},
		"Executor.abi":                &bintree{compiledExecutorAbi, map[string]*bintree{}},
		"Executor.bin-runtime":        &bintree{compiledExecutorBinRuntime, map[string]*bintree{}},
		"Extension.abi":               &bintree{compiledExtensionAbi, map[string]*bintree{}},
		"Extension.bin-runtime":       &bintree{compiledExtensionBinRuntime, map[string]*bintree{}},
		"ExtensionNative.abi":         &bintree{compiledExtensionnativeAbi, map[string]*bintree{}},
		"ExtensionNative.bin-runtime": &bintree{compiledExtensionnativeBinRuntime, map[string]*bintree{}},
		"Measure.abi":                 &bintree{compiledMeasureAbi, map[string]*bintree{}},
		"Measure.bin-runtime":         &bintree{compiledMeasureBinRuntime, map[string]*bintree{}},
		"Params.abi":                  &bintree{compiledParamsAbi, map[string]*bintree{}},
		"Params.bin-runtime":          &bintree{compiledParamsBinRuntime, map[string]*bintree{}},
		"ParamsNative.abi":            &bintree{compiledParamsnativeAbi, map[string]*bintree{}},
		"ParamsNative.bin-runtime":    &bintree{compiledParamsnativeBinRuntime, map[string]*bintree{}},
		"Prototype.abi":               &bintree{compiledPrototypeAbi, map[string]*bintree{}},
		"Prototype.bin-runtime":       &bintree{compiledPrototypeBinRuntime, map[string]*bintree{}},
		"PrototypeEvent.abi":          &bintree{compiledPrototypeeventAbi, map[string]*bintree{}},
		"PrototypeEvent.bin-runtime":  &bintree{compiledPrototypeeventBinRuntime, map[string]*bintree{}},
		"PrototypeNative.abi":         &bintree{compiledPrototypenativeAbi, map[string]*bintree{}},
		"PrototypeNative.bin-runtime": &bintree{compiledPrototypenativeBinRuntime, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory.
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively.
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
